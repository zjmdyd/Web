{"ast":null,"code":"import { createStore } from 'vuex';\n\n/*\nVuex是Vue中的全局状态管理框架，它可以管理应用的所有组件的状态\n*/\n\nexport default createStore({\n  // 严格模式\n  /*\n  不要在发布环境下启用严格模式！严\n  格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失\n  */\n  strict: process.env.NODE_ENV !== 'production',\n  // 创建数据仓库\n  state: {\n    name: '马云',\n    age: 30,\n    todos: [{\n      id: 1,\n      text: '...',\n      done: true\n    }, {\n      id: 2,\n      text: '...',\n      done: false\n    }]\n  },\n  getters: {\n    doneTodos(state) {\n      return state.todos.filter(todo => todo.done);\n    },\n    doneTodosCount(state, getters) {\n      return getters.doneTodos.length;\n    }\n  },\n  // 使用以下方法调用数据仓库里的数据\n\n  // 同步调用: 是用来修改state\n  mutations: {\n    // * 不带参的\n    // trigger(state) {\n    //   console.log('不带参的trigger方法')\n    //   state.name = '马化腾'\n    // },\n    // 带参数的\n    trigger(state, val) {\n      console.log('带参的trigger方法');\n      console.log(state);\n      console.log(val);\n      state.name = val[0];\n      state.age = val[1];\n    }\n  },\n  // 异步调用: 处理一些异步操作的函数\n  actions: {\n    sub(store, val) {\n      console.log('actions中异步方法被调用');\n      console.log(val);\n      store.commit('trigger', val);\n    }\n  }\n});","map":{"version":3,"names":["createStore","strict","process","env","NODE_ENV","state","name","age","todos","id","text","done","getters","doneTodos","filter","todo","doneTodosCount","length","mutations","trigger","val","console","log","actions","sub","store","commit"],"sources":["/Users/issuser/Desktop/Project/Web/05_vue3/vue_demo/src/store/index.js"],"sourcesContent":["import {\n  createStore\n} from 'vuex'\n\n/*\nVuex是Vue中的全局状态管理框架，它可以管理应用的所有组件的状态\n*/\n\nexport default createStore({\n  // 严格模式\n  /*\n  不要在发布环境下启用严格模式！严\n  格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失\n  */\n  strict: process.env.NODE_ENV !== 'production',  \n  // 创建数据仓库\n  state: {\n    name: '马云',\n    age: 30,\n    todos: [\n      { id: 1, text: '...', done: true },\n      { id: 2, text: '...', done: false }\n    ]\n  },\n  getters: {\n    doneTodos (state) {\n      return state.todos.filter(todo => todo.done)\n    },\n    doneTodosCount (state, getters) {\n      return getters.doneTodos.length\n    }\n  },\n\n  // 使用以下方法调用数据仓库里的数据\n\n  // 同步调用: 是用来修改state\n  mutations: {\n    // * 不带参的\n    // trigger(state) {\n    //   console.log('不带参的trigger方法')\n    //   state.name = '马化腾'\n    // },\n    // 带参数的\n    trigger(state, val) {\n      console.log('带参的trigger方法')\n      console.log(state)\n      console.log(val)\n      state.name = val[0]\n      state.age = val[1]\n    }\n  },\n\n  // 异步调用: 处理一些异步操作的函数\n  actions: {\n    sub(store, val) {\n      console.log('actions中异步方法被调用')\n      console.log(val)\n      store.commit('trigger', val)\n    }\n  },\n})"],"mappings":"AAAA,SACEA,WAAW,QACN,MAAM;;AAEb;AACA;AACA;;AAEA,eAAeA,WAAW,CAAC;EACzB;EACA;AACF;AACA;AACA;EACEC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;EAC7C;EACAC,KAAK,EAAE;IACLC,IAAI,EAAE,IAAI;IACVC,GAAG,EAAE,EAAE;IACPC,KAAK,EAAE,CACL;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAE;IAAK,CAAC,EAClC;MAAEF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAE;IAAM,CAAC;EAEvC,CAAC;EACDC,OAAO,EAAE;IACPC,SAAS,CAAER,KAAK,EAAE;MAChB,OAAOA,KAAK,CAACG,KAAK,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACJ,IAAI,CAAC;IAC9C,CAAC;IACDK,cAAc,CAAEX,KAAK,EAAEO,OAAO,EAAE;MAC9B,OAAOA,OAAO,CAACC,SAAS,CAACI,MAAM;IACjC;EACF,CAAC;EAED;;EAEA;EACAC,SAAS,EAAE;IACT;IACA;IACA;IACA;IACA;IACA;IACAC,OAAO,CAACd,KAAK,EAAEe,GAAG,EAAE;MAClBC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3BD,OAAO,CAACC,GAAG,CAACjB,KAAK,CAAC;MAClBgB,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBf,KAAK,CAACC,IAAI,GAAGc,GAAG,CAAC,CAAC,CAAC;MACnBf,KAAK,CAACE,GAAG,GAAGa,GAAG,CAAC,CAAC,CAAC;IACpB;EACF,CAAC;EAED;EACAG,OAAO,EAAE;IACPC,GAAG,CAACC,KAAK,EAAEL,GAAG,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9BD,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBK,KAAK,CAACC,MAAM,CAAC,SAAS,EAAEN,GAAG,CAAC;IAC9B;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}