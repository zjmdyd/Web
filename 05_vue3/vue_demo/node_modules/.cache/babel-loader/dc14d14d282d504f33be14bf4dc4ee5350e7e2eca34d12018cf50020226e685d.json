{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\");\n}","map":{"version":3,"mappings":";;uBACEA,oBAAW","names":["_createElementBlock"],"sourceRoot":"","sources":["/Users/issuser/Desktop/Project/Web/05_vue3/vue_demo/src/components/vue3-018.vue"],"sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script setup>\n\n/*\nProxy对象用于创建一个对象的代理，是用于监听一个对象的相关操作。代理对象可以监听我们对原对象的操作。\n接下来我们将通过一个监听对象的属性操作来认识学习下什么是Proxy。\nProxy对象需要传入两个参数，分别是需要被Proxy代理的对象和一系列的捕获器\n*/\nconst obj = {\n  name: '_island'\n}\n\nconst objProxy = new Proxy(obj, {\n  // get捕获器\n  get: function (target, key) {\n    console.log(`捕获到对象获取${key}属性的值操作`);\n    return target[key];\n  },\n  // set捕获器\n  set: function (target, key, val) {\n    console.log(`捕获到对象设置${key}属性的值操作,新值为${val}`);\n    target[key] = val;\n  }\n});\nconsole.log(objProxy);\n// objProxy.name = \"哈哈哈\"\n// console.log();\nconsole.log(objProxy.name);\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}