{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(\" *******这是子组件****** \"), _createElementVNode(\"h1\", null, \"姓名: \" + _toDisplayString($setup.obj.name), 1 /* TEXT */), _createElementVNode(\"h1\", null, \"年龄: \" + _toDisplayString($setup.obj.age), 1 /* TEXT */), _createElementVNode(\"h1\", null, \"ref的数据:\" + _toDisplayString($setup.ref_in), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.btnEvent && $setup.btnEvent(...args))\n  }, \"点击更新视图层某一个数据\")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;oGAEE,uBAA2B,YAAvB,MAAI,oBAAGA,UAAG,CAACC,IAAI,kBACnBC,oBAA0B,YAAtB,MAAI,oBAAGF,UAAG,CAACG,GAAG,kBAClBD,oBAA4B,YAAxB,SAAO,oBAAGF,aAAM,kBACpBE,oBAA+C;IAAtCE,OAAK,yCAAEJ,2CAAQ;KAAE,cAAY","names":["$setup","name","_createElementVNode","age","onClick"],"sourceRoot":"","sources":["/Users/issuser/Desktop/Project/Web/05_vue3/vue_demo/src/components/vue3-004.vue"],"sourcesContent":["<template>\n    *******这是子组件******\n  <h1>姓名: {{ obj.name }}</h1>\n  <h1>年龄: {{ obj.age }}</h1>\n  <h1>ref的数据:{{ ref_in }}</h1>\n  <button @click=\"btnEvent\">点击更新视图层某一个数据</button>\n</template>\n\n<script>\n// reactive不能用基本数据类型，ref可以\nimport { ref, toRef } from 'vue';\nexport default ({\n  setup() {\n    const obj = { name: '马云', age: 50 };    // 源数据\n    const res = toRef(obj, 'name'); // toRef需传两个参数，第一个操作对象，第二个对象的某个属性\n\n    const num = 0;              // 源数据\n    const ref_in = ref(num);    // 实质是复制操作\n    function btnEvent() {\n      res.value = '马化腾';   // toRef需改响应数据会影响源数据但不会更新视图层\n      console.log(res.obj)        // {name: '马化腾', age: 50}，源数据已改\n      console.log(obj)        // {name: '马化腾', age: 50}，源数据已改\n\n      ref_in.value++;\n      console.log(num);   // num不会改变，ref改响应数据不会影响源数据，但会更新视图层\n    }\n\n    return { btnEvent, obj, ref_in }\n  },\n})\n\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}