{"ast":null,"code":"const longpress = {\n  bind: function (el, binding, vNode) {\n    if (typeof binding.value !== 'function') {\n      throw 'callback must be a function';\n    }\n    // 定义变量\n    let pressTimer = null;\n    // 创建计时器（ 2秒后执行函数 ）\n    let start = e => {\n      if (e.type === 'click' && e.button !== 0) {\n        return;\n      }\n      if (pressTimer === null) {\n        pressTimer = setTimeout(() => {\n          handler();\n        }, 2000);\n      }\n    };\n    // 取消计时器\n    let cancel = e => {\n      if (pressTimer !== null) {\n        clearTimeout(pressTimer);\n        pressTimer = null;\n      }\n    };\n    // 运行函数\n    const handler = e => {\n      binding.value(e);\n    };\n    // 添加事件监听器\n    el.addEventListener('mousedown', start);\n    el.addEventListener('touchstart', start);\n    // 取消计时器\n    el.addEventListener('click', cancel);\n    el.addEventListener('mouseout', cancel);\n    el.addEventListener('touchend', cancel);\n    el.addEventListener('touchcancel', cancel);\n  },\n  // 当传进来的值更新的时候触发\n  componentUpdated(el, {\n    value\n  }) {\n    el.$value = value;\n  },\n  // 指令与元素解绑的时候，移除事件绑定\n  unbind(el) {\n    el.removeEventListener('click', el.handler);\n  }\n};\nexport default longpress;","map":{"version":3,"names":["longpress","bind","el","binding","vNode","value","pressTimer","start","e","type","button","setTimeout","handler","cancel","clearTimeout","addEventListener","componentUpdated","$value","unbind","removeEventListener"],"sources":["/Users/issuser/Desktop/Project/Web/05_vue3/vue_demo/src/directives/longpress.js"],"sourcesContent":["const longpress = { \n  bind: function (el, binding, vNode) {\n    if (typeof binding.value !== 'function') {\n      throw 'callback must be a function'\n    }\n    // 定义变量\n    let pressTimer = null\n    // 创建计时器（ 2秒后执行函数 ）\n    let start = (e) => {\n      if (e.type === 'click' && e.button !== 0) {\n        return\n      }\n      if (pressTimer === null) {\n        pressTimer = setTimeout(() => {\n          handler()\n        }, 2000)\n      }\n    }\n    // 取消计时器\n    let cancel = (e) => {\n      if (pressTimer !== null) {\n        clearTimeout(pressTimer)\n        pressTimer = null\n      }\n    }\n    // 运行函数\n    const handler = (e) => {\n      binding.value(e)\n    }\n    // 添加事件监听器\n    el.addEventListener('mousedown', start)\n    el.addEventListener('touchstart', start)\n    // 取消计时器\n    el.addEventListener('click', cancel)\n    el.addEventListener('mouseout', cancel)\n    el.addEventListener('touchend', cancel)\n    el.addEventListener('touchcancel', cancel)\n  },\n  // 当传进来的值更新的时候触发\n  componentUpdated (el, { value }) {\n    el.$value = value\n  },\n  // 指令与元素解绑的时候，移除事件绑定\n  unbind (el) {\n    el.removeEventListener('click', el.handler)\n  }\n}\n\nexport default longpress\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG;EAChBC,IAAI,EAAE,UAAUC,EAAE,EAAEC,OAAO,EAAEC,KAAK,EAAE;IAClC,IAAI,OAAOD,OAAO,CAACE,KAAK,KAAK,UAAU,EAAE;MACvC,MAAM,6BAA6B;IACrC;IACA;IACA,IAAIC,UAAU,GAAG,IAAI;IACrB;IACA,IAAIC,KAAK,GAAIC,CAAC,IAAK;MACjB,IAAIA,CAAC,CAACC,IAAI,KAAK,OAAO,IAAID,CAAC,CAACE,MAAM,KAAK,CAAC,EAAE;QACxC;MACF;MACA,IAAIJ,UAAU,KAAK,IAAI,EAAE;QACvBA,UAAU,GAAGK,UAAU,CAAC,MAAM;UAC5BC,OAAO,EAAE;QACX,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC;IACD;IACA,IAAIC,MAAM,GAAIL,CAAC,IAAK;MAClB,IAAIF,UAAU,KAAK,IAAI,EAAE;QACvBQ,YAAY,CAACR,UAAU,CAAC;QACxBA,UAAU,GAAG,IAAI;MACnB;IACF,CAAC;IACD;IACA,MAAMM,OAAO,GAAIJ,CAAC,IAAK;MACrBL,OAAO,CAACE,KAAK,CAACG,CAAC,CAAC;IAClB,CAAC;IACD;IACAN,EAAE,CAACa,gBAAgB,CAAC,WAAW,EAAER,KAAK,CAAC;IACvCL,EAAE,CAACa,gBAAgB,CAAC,YAAY,EAAER,KAAK,CAAC;IACxC;IACAL,EAAE,CAACa,gBAAgB,CAAC,OAAO,EAAEF,MAAM,CAAC;IACpCX,EAAE,CAACa,gBAAgB,CAAC,UAAU,EAAEF,MAAM,CAAC;IACvCX,EAAE,CAACa,gBAAgB,CAAC,UAAU,EAAEF,MAAM,CAAC;IACvCX,EAAE,CAACa,gBAAgB,CAAC,aAAa,EAAEF,MAAM,CAAC;EAC5C,CAAC;EACD;EACAG,gBAAgB,CAAEd,EAAE,EAAE;IAAEG;EAAM,CAAC,EAAE;IAC/BH,EAAE,CAACe,MAAM,GAAGZ,KAAK;EACnB,CAAC;EACD;EACAa,MAAM,CAAEhB,EAAE,EAAE;IACVA,EAAE,CAACiB,mBAAmB,CAAC,OAAO,EAAEjB,EAAE,CAACU,OAAO,CAAC;EAC7C;AACF,CAAC;AAED,eAAeZ,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}