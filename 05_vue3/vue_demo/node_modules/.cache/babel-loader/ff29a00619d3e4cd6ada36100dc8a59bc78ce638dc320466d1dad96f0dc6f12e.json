{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"back\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HelloWorld = _resolveComponent(\"HelloWorld\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createTextVNode(\" 这是父组件 \"), _createElementVNode(\"h2\", null, \"姓名:\" + _toDisplayString($setup.res), 1 /* TEXT */), _createCommentVNode(\" vue3-010.vue用到 \"), _createCommentVNode(\" <button @click=\\\"btnEvent\\\">点击传值给子组件</button> \")]), _createElementVNode(\"h2\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.v1 = !$setup.v1)\n  }, \"点击显示隐藏子组件\"), $setup.v1 ? (_openBlock(), _createBlock(_component_HelloWorld, {\n    key: 0\n  })) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAM;;;6DAAjBC,oBAKM,OALNC,UAKM,oBALY,SAEhB,uBAAmB,YAAf,KAAG,oBAAEC,UAAG,kBACZC,uCAAuB,EACvBA,sEAAoD,IAEtDH,oBAAoC;IAA/BI,OAAK,sCAAEF,SAAE,IAAIA,SAAE;KAAE,WAAS,GACbA,SAAE,kBAApBG,aAAuBC;IAAAC;EAAA","names":["class","_createElementVNode","_hoisted_1","$setup","_createCommentVNode","onClick","_createBlock","_component_HelloWorld","key"],"sourceRoot":"","sources":["/Users/issuser/Desktop/vue-demo/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"back\">\n    这是父组件\n    <h2>姓名:{{res}}</h2>\n    <!-- vue3-010.vue用到 -->\n    <!-- <button @click=\"btnEvent\">点击传值给子组件</button> -->\n  </div>\n  <h2 @click=\"v1 = !v1\">点击显示隐藏子组件</h2>\n  <HelloWorld v-if=\"v1\"/>\n</template>\n\n<script>\n// import HelloWorld from './components/vue3-001.vue'\n// import HelloWorld from './components/vue3-002.vue'\n// import HelloWorld from './components/vue3-003.vue'\n// import HelloWorld from './components/vue3-004.vue'\n// import HelloWorld from './components/vue3-005.vue'\n// import HelloWorld from './components/vue3-006.vue'\n// import HelloWorld from './components/vue3-007.vue'\n// import HelloWorld from './components/vue3-008.vue'\n// import HelloWorld from './components/vue3-009.vue'\n// import HelloWorld from './components/vue3-010.vue'\n// import HelloWorld from './components/vue3-011.vue'\n// import HelloWorld from './components/vue3-012.vue'\nimport HelloWorld from './components/vue3-012.vue'\n\nimport { computed, ref, onErrorCaptured} from 'vue'\nimport { useStore } from 'vuex'\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  },\n  setup() {\n    //#region \n    // const p1 = reactive({name: '马云', age: 50})\n    // provide('name', p1)   // 进入页面自动传值\n\n    // const val = ref() // ref节点，把ref节点绑定到子组件\n    // function btnEvent() {\n    //   val.value.receive(p1) // 给子组件传值\n    // }\n//#endregion\n\n\n    // 从vuex数据仓库里面取数据\n    const store = useStore()\n    const res = computed(()=>{\n        // console.log(store.state.name)\n        return store.state.name\n    })\n\n    const v1 = ref(true)\n\n    // 所以要放在父组件方法中, 一般不用, 因为出错控制台直接打印出来了\n    onErrorCaptured(()=>{\n        console.log('onErrorCaptured, 当捕获一个来自子孙组件的错误时被调用')\n    })\n\n    return {res, v1}\n  },\n}\n</script>\n\n<style>\n.back {\n  background-color: red;\n  padding: 20px 0;\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}