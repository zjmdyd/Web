{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"back\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HelloWorld = _resolveComponent(\"HelloWorld\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createTextVNode(\" --> \"), _createCommentVNode(\" 这是父组件 \"), _createElementVNode(\"h2\", null, \"姓名:\" + _toDisplayString($setup.res), 1 /* TEXT */), _createCommentVNode(\" vue3-010.vue用到 \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.btnEvent && $setup.btnEvent(...args))\n  }, \"点击传值给子组件\")]), _createCommentVNode(\" 生命周期函数demo:vue3-012有用到 \"), _createCommentVNode(\" <h2 @click=\\\"v1 = !v1\\\">点击显示隐藏子组件</h2> \"), _createCommentVNode(\" <HelloWorld v-if=\\\"v1\\\"/> \"), _createCommentVNode(\" <div class=\\\"back\\\">\\n    我是父组件:\\n    <h2>姓名:{{res_a.name}}</h2>\\n    <h2>年龄:{{res_a.age}}</h2>\\n    <h2>公司:{{res_a.company}}</h2>\\n  </div> \"), _createCommentVNode(\" 组组件传值vue3-010.vue会用到 \"), _createCommentVNode(\" <HelloWorld ref=\\\"\\\"/> \"), _createVNode(_component_HelloWorld)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAM;;;6DAAjBC,oBAKM,OALNC,UAKM,oBALY,OAChB,iCAAc,EACdD,oBAAmB,YAAf,KAAG,oBAAEE,UAAG,kBACZC,uCAAuB,EACvBH,oBAA2C;IAAlCI,OAAK,yCAAEF,2CAAQ;KAAE,UAAQ,KAGpCC,+CAA+B,EAC/BA,+DAA6C,EAC7CA,kDAAgC,EAEhCA,qKAKU,EACVA,6CAA6B,EAC7BA,+CAA6B,EAC7BE,aAAcC","names":["class","_createElementVNode","_hoisted_1","$setup","_createCommentVNode","onClick","_createVNode","_component_HelloWorld"],"sourceRoot":"","sources":["/Users/issuser/Desktop/Project/Web/05_vue3/vue_demo/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"back\"> -->\n    <!-- 这是父组件 -->\n    <h2>姓名:{{res}}</h2>\n    <!-- vue3-010.vue用到 -->\n    <button @click=\"btnEvent\">点击传值给子组件</button>\n  </div>\n\n  <!-- 生命周期函数demo:vue3-012有用到 -->\n  <!-- <h2 @click=\"v1 = !v1\">点击显示隐藏子组件</h2> -->\n  <!-- <HelloWorld v-if=\"v1\"/> -->\n\n  <!-- <div class=\"back\">\n    我是父组件:\n    <h2>姓名:{{res_a.name}}</h2>\n    <h2>年龄:{{res_a.age}}</h2>\n    <h2>公司:{{res_a.company}}</h2>\n  </div> -->\n  <!-- 组组件传值vue3-010.vue会用到 -->\n  <!-- <HelloWorld ref=\"\"/> --> \n  <HelloWorld />\n</template>\n\n<script>\n// import HelloWorld from './components/vue3-001.vue'\n// import HelloWorld from './components/vue3-002.vue'\n// import HelloWorld from './components/vue3-003.vue'\n// import HelloWorld from './components/vue3-004.vue'\n// import HelloWorld from './components/vue3-005.vue'\n// import HelloWorld from './components/vue3-006.vue'\n// import HelloWorld from './components/vue3-007.vue'\n// import HelloWorld from './components/vue3-008.vue'\n// import HelloWorld from './components/vue3-009.vue'\n// import HelloWorld from './components/vue3-010.vue'\n// import HelloWorld from './components/vue3-011.vue'\n// import HelloWorld from './components/vue3-012.vue'\n// import HelloWorld from './components/vue3-013.vue'\nimport HelloWorld from './components/vue3-014.vue'\n\nimport { computed, ref, onErrorCaptured, reactive} from 'vue'\nimport { useStore } from 'vuex'\nimport plbLic from './config/public'\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  },\n  setup() {\n    //#region \n    const p1 = reactive({name: '马云', age: 50})\n    // provide('name', p1)   // 进入页面自动传值\n\n    const val = ref() // ref节点，把ref节点绑定到子组件\n    function btnEvent() {\n      val.value.receive(p1) // 给子组件传值\n    }\n//#endregion\n\n//#region \n    // 从vuex数据仓库里面取数据\n    const store = useStore()\n    const res = computed(()=>{\n        // console.log(store.state.name)\n        return store.state.name\n    })\n\n    const v1 = ref(true)\n\n    // 所以要放在父组件方法中, 一般不用, 因为出错控制台直接打印出来了\n    onErrorCaptured(()=>{\n        console.log('onErrorCaptured, 当捕获一个来自子孙组件的错误时被调用')\n    })\n//#endregion\n\n    // const res_a = reactive({\n    //   name: '马云',\n    //   age: 50,\n    //   company: '阿里巴巴'\n    // })\n    const res_a = plbLic()\n    return {res, v1, res_a, btnEvent}\n  },\n}\n</script>\n\n<style>\n.back {\n  background-color: red;\n  padding: 20px 0;\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}