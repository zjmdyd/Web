{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Access the state directly from the store \"), _createElementVNode(\"div\", null, \"Current Count: \" + _toDisplayString($setup.counter.count), 1 /* TEXT */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"mappings":";;6DACEA,iEAAiD,EACjDC,oBAA6C,aAAxC,iBAAe,oBAAGC,cAAO,CAACC,KAAK","names":["_createCommentVNode","_createElementVNode","$setup","count"],"sourceRoot":"","sources":["/Users/issuser/Desktop/Project/Web/05_vue3/vue_demo/src/components/vue3-019.vue"],"sourcesContent":["<template>\n  <!-- Access the state directly from the store -->\n  <div>Current Count: {{ counter.count }}</div>\n</template>\n\n<script setup>\n\nimport { useCounterStore } from '@/store/counter'\n\nconst counter = useCounterStore()\ncounter.count++\n// with autocompletion âœ¨\ncounter.$patch({ count: counter.count + 1 })\n// or using an action instead\n// counter.increment()\nsetInterval(() => {\n  counter.increment()\n  console.log(counter.double())\n}, 1000);\n</script>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}