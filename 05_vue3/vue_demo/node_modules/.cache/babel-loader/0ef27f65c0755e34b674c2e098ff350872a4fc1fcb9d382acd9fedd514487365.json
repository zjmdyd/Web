{"ast":null,"code":"export default {\n  __name: 'vue3-016',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n\n    // const vFocus = {\n    //   mounted: (el) => el.focus()\n    // }\n    const vDescription = {\n      mounted: (el, binding, vnode, prevNode) => {\n        console.log('自定义局部指令mounted函数');\n        console.log(el);\n        console.log(binding);\n        console.log(vnode);\n        console.log(prevNode);\n      },\n      beforeUpdate: (el, binding) => {\n        console.log('自定义局部指令beforeUpdate函数');\n        console.log(el);\n        console.log(binding);\n      },\n      update: (el, binding) => {\n        console.log('自定义局部指令update函数');\n        console.log(el);\n        console.log(binding);\n      },\n      inserted: (el, binding) => {\n        console.log('自定义局部指令inserted函数');\n        console.log(el);\n        console.log(binding);\n      }\n    };\n    /*\n    created:在绑定元素的 attribute 前或事件监听器应用前调用\n    beforeMount:在元素被插入到 DOM 前调用\n    mounted: 在绑定元素的父组件及他自己的所有子节点都挂载完成后调用\n    beforeUpdate:绑定元素的父组件更新前调用\n    updated:在绑定元素的父组件及他自己的所有子节点都更新后调用\n    beforeUnmount:绑定元素的父组件卸载前调用\n    unmounted:绑定元素的父组件卸载后调用\n    \n    自定义钩子都有以下四种参数：\n    \n    el:指令绑定到的元素。这可以用于直接操作 DOM。\n    binding:一个对象，包含以下属性。\n      value：传递给指令的值。例如在v-my-directive=\"1 + 1\"中，值是2。\n      oldValue：之前的值，仅在beforeUpdate和updated中可用。无论值是否更改，它都可用。\n      arg：传递给指令的参数 (如果有的话)。例如在v-my-directive:foo中，参数是\"foo\"。\n      modifiers：一个包含修饰符的对象 (如果有的话)。例如在v-my-directive.foo.bar中，修饰符对象是{ foo: true, bar: true }。\n      instance：使用该指令的组件实例。\n      dir：指令的定义对象。\n    vnode:代表绑定元素的底层 VNode。\n    prevNode:之前的渲染中代表指令所绑定元素的 VNode。仅在beforeUpdate和updated钩子中可用。\n    */\n    // 选项式写法\n    // directives: {\n    //   focus: {\n    //     // 指令的定义\n    //     mounted(el) {\n    //       el.focus()\n    //     }\n    //   }\n    // }\n\n    const __returned__ = {\n      vDescription\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":";;;;;;;IAaA;IACA;IACA;IACA,MAAMA,YAAY,GAAG;MACnBC,OAAO,EAAE,CAACC,EAAE,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ,KAAK;QACzCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/BD,OAAO,CAACC,GAAG,CAACL,EAAE,CAAC;QACfI,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;QACpBG,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;QAClBE,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACvB,CAAC;MACDG,YAAY,EAAE,CAACN,EAAE,EAAEC,OAAO,KAAK;QAC7BG,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACpCD,OAAO,CAACC,GAAG,CAACL,EAAE,CAAC;QACfI,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;MACtB,CAAC;MACDM,MAAM,EAAE,CAACP,EAAE,EAAEC,OAAO,KAAK;QACvBG,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;QAC9BD,OAAO,CAACC,GAAG,CAACL,EAAE,CAAC;QACfI,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;MACtB,CAAC;MACDO,QAAQ,EAAE,CAACR,EAAE,EAAEC,OAAO,KAAK;QACzBG,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChCD,OAAO,CAACC,GAAG,CAACL,EAAE,CAAC;QACfI,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;MACtB;IACF,CAAC;IACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA","names":["vDescription","mounted","el","binding","vnode","prevNode","console","log","beforeUpdate","update","inserted"],"sources":["/Users/issuser/Desktop/Project/Web/05_vue3/vue_demo/src/components/vue3-016.vue"],"sourcesContent":["<template>\n  <div>\n    <div>*****自定义全局指令*****</div>\n    <input v-focus/>\n    <div>*****自定义局部指令*****</div>\n    <div id=\"cus_directive\" v-description=\"{ color: 'white', text: 'hello!' }\"></div>\n    <img v-pin:warning.right.top='true' src=\"../assets/logo.png\"/>\n    <div style=\"position: absolute; top: 100px;left: 100px;\"></div>\n  </div>\n</template>\n\n<script setup>\n\n// const vFocus = {\n//   mounted: (el) => el.focus()\n// }\nconst vDescription = {\n  mounted: (el, binding, vnode, prevNode) => {\n    console.log('自定义局部指令mounted函数')\n    console.log(el)\n    console.log(binding)\n    console.log(vnode)\n    console.log(prevNode)\n  },\n  beforeUpdate: (el, binding) => {\n    console.log('自定义局部指令beforeUpdate函数')\n    console.log(el)\n    console.log(binding)\n  },\n  update: (el, binding) => {\n    console.log('自定义局部指令update函数')\n    console.log(el)\n    console.log(binding)\n  },\n  inserted: (el, binding) => {\n    console.log('自定义局部指令inserted函数')\n    console.log(el)\n    console.log(binding)\n  },\n}\n/*\ncreated:在绑定元素的 attribute 前或事件监听器应用前调用\nbeforeMount:在元素被插入到 DOM 前调用\nmounted: 在绑定元素的父组件及他自己的所有子节点都挂载完成后调用\nbeforeUpdate:绑定元素的父组件更新前调用\nupdated:在绑定元素的父组件及他自己的所有子节点都更新后调用\nbeforeUnmount:绑定元素的父组件卸载前调用\nunmounted:绑定元素的父组件卸载后调用\n\n自定义钩子都有以下四种参数：\n\nel:指令绑定到的元素。这可以用于直接操作 DOM。\nbinding:一个对象，包含以下属性。\n  value：传递给指令的值。例如在v-my-directive=\"1 + 1\"中，值是2。\n  oldValue：之前的值，仅在beforeUpdate和updated中可用。无论值是否更改，它都可用。\n  arg：传递给指令的参数 (如果有的话)。例如在v-my-directive:foo中，参数是\"foo\"。\n  modifiers：一个包含修饰符的对象 (如果有的话)。例如在v-my-directive.foo.bar中，修饰符对象是{ foo: true, bar: true }。\n  instance：使用该指令的组件实例。\n  dir：指令的定义对象。\nvnode:代表绑定元素的底层 VNode。\nprevNode:之前的渲染中代表指令所绑定元素的 VNode。仅在beforeUpdate和updated钩子中可用。\n*/\n// 选项式写法\n// directives: {\n//   focus: {\n//     // 指令的定义\n//     mounted(el) {\n//       el.focus()\n//     }\n//   }\n// }\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}