{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\n/*!\n  * pinia v2.0.32\n  * (c) 2023 Eduardo San Martin Morote\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, toRaw, watch, unref, markRaw, effectScope, ref, isVue2, isRef, isReactive, set, getCurrentScope, onScopeDispose, reactive, toRef, del, nextTick, computed, toRefs } from 'vue-demi';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\n/**\r\n * setActivePinia must be called to handle SSR at the top of functions like\r\n * `fetch`, `setup`, `serverPrefetch` and others\r\n */\nlet activePinia;\n/**\r\n * Sets or unsets the active pinia. Used in SSR and internally when calling\r\n * actions and getters\r\n *\r\n * @param pinia - Pinia instance\r\n */\nconst setActivePinia = pinia => activePinia = pinia;\n/**\r\n * Get the currently active pinia if there is any.\r\n */\nconst getActivePinia = () => getCurrentInstance() && inject(piniaSymbol) || activePinia;\nconst piniaSymbol = process.env.NODE_ENV !== 'production' ? Symbol('pinia') : /* istanbul ignore next */Symbol();\nfunction isPlainObject(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no) {\n  return o && typeof o === 'object' && Object.prototype.toString.call(o) === '[object Object]' && typeof o.toJSON !== 'function';\n}\n// type DeepReadonly<T> = { readonly [P in keyof T]: DeepReadonly<T[P]> }\n// TODO: can we change these to numbers?\n/**\r\n * Possible types for SubscriptionCallback\r\n */\nvar MutationType;\n(function (MutationType) {\n  /**\r\n   * Direct mutation of the state:\r\n   *\r\n   * - `store.name = 'new name'`\r\n   * - `store.$state.name = 'new name'`\r\n   * - `store.list.push('new item')`\r\n   */\n  MutationType[\"direct\"] = \"direct\";\n  /**\r\n   * Mutated the state with `$patch` and an object\r\n   *\r\n   * - `store.$patch({ name: 'newName' })`\r\n   */\n  MutationType[\"patchObject\"] = \"patch object\";\n  /**\r\n   * Mutated the state with `$patch` and a function\r\n   *\r\n   * - `store.$patch(state => state.name = 'newName')`\r\n   */\n  MutationType[\"patchFunction\"] = \"patch function\";\n  // maybe reset? for $state = {} and $reset\n})(MutationType || (MutationType = {}));\nconst IS_CLIENT = typeof window !== 'undefined';\n/**\r\n * Should we add the devtools plugins.\r\n * - only if dev mode or forced through the prod devtools flag\r\n * - not in test\r\n * - only if window exists (could change in the future)\r\n */\nconst USE_DEVTOOLS = (process.env.NODE_ENV !== 'production' || typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__) && !(process.env.NODE_ENV === 'test') && IS_CLIENT;\n\n/*\r\n * FileSaver.js A saveAs() FileSaver implementation.\r\n *\r\n * Originally by Eli Grey, adapted as an ESM module by Eduardo San Martin\r\n * Morote.\r\n *\r\n * License : MIT\r\n */\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nconst _global = /*#__PURE__*/(() => typeof window === 'object' && window.window === window ? window : typeof self === 'object' && self.self === self ? self : typeof global === 'object' && global.global === global ? global : typeof globalThis === 'object' ? globalThis : {\n  HTMLElement: null\n})();\nfunction bom(blob, {\n  autoBom = false\n} = {}) {\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xfeff), blob], {\n      type: blob.type\n    });\n  }\n  return blob;\n}\nfunction download(url, name, opts) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', url);\n  xhr.responseType = 'blob';\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts);\n  };\n  xhr.onerror = function () {\n    console.error('could not download file');\n  };\n  xhr.send();\n}\nfunction corsEnabled(url) {\n  const xhr = new XMLHttpRequest();\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false);\n  try {\n    xhr.send();\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299;\n}\n// `a.click()` doesn't work for all browsers (#465)\nfunction click(node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'));\n  } catch (e) {\n    const evt = document.createEvent('MouseEvents');\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\n    node.dispatchEvent(evt);\n  }\n}\nconst _navigator = typeof navigator === 'object' ? navigator : {\n  userAgent: ''\n};\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nconst isMacOSWebView = /*#__PURE__*/(() => /Macintosh/.test(_navigator.userAgent) && /AppleWebKit/.test(_navigator.userAgent) && !/Safari/.test(_navigator.userAgent))();\nconst saveAs = !IS_CLIENT ? () => {} // noop\n:\n// Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program\ntypeof HTMLAnchorElement !== 'undefined' && 'download' in HTMLAnchorElement.prototype && !isMacOSWebView ? downloadSaveAs :\n// Use msSaveOrOpenBlob as a second approach\n'msSaveOrOpenBlob' in _navigator ? msSaveAs :\n// Fallback to using FileReader and a popup\nfileSaverSaveAs;\nfunction downloadSaveAs(blob, name = 'download', opts) {\n  const a = document.createElement('a');\n  a.download = name;\n  a.rel = 'noopener'; // tabnabbing\n  // TODO: detect chrome extensions & packaged apps\n  // a.target = '_blank'\n  if (typeof blob === 'string') {\n    // Support regular links\n    a.href = blob;\n    if (a.origin !== location.origin) {\n      if (corsEnabled(a.href)) {\n        download(blob, name, opts);\n      } else {\n        a.target = '_blank';\n        click(a);\n      }\n    } else {\n      click(a);\n    }\n  } else {\n    // Support blobs\n    a.href = URL.createObjectURL(blob);\n    setTimeout(function () {\n      URL.revokeObjectURL(a.href);\n    }, 4e4); // 40s\n    setTimeout(function () {\n      click(a);\n    }, 0);\n  }\n}\nfunction msSaveAs(blob, name = 'download', opts) {\n  if (typeof blob === 'string') {\n    if (corsEnabled(blob)) {\n      download(blob, name, opts);\n    } else {\n      const a = document.createElement('a');\n      a.href = blob;\n      a.target = '_blank';\n      setTimeout(function () {\n        click(a);\n      });\n    }\n  } else {\n    // @ts-ignore: works on windows\n    navigator.msSaveOrOpenBlob(bom(blob, opts), name);\n  }\n}\nfunction fileSaverSaveAs(blob, name, opts, popup) {\n  // Open a popup immediately do go around popup blocker\n  // Mostly only available on user interaction and the fileReader is async so...\n  popup = popup || open('', '_blank');\n  if (popup) {\n    popup.document.title = popup.document.body.innerText = 'downloading...';\n  }\n  if (typeof blob === 'string') return download(blob, name, opts);\n  const force = blob.type === 'application/octet-stream';\n  const isSafari = /constructor/i.test(String(_global.HTMLElement)) || 'safari' in _global;\n  const isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent);\n  if ((isChromeIOS || force && isSafari || isMacOSWebView) && typeof FileReader !== 'undefined') {\n    // Safari doesn't allow downloading of blob URLs\n    const reader = new FileReader();\n    reader.onloadend = function () {\n      let url = reader.result;\n      if (typeof url !== 'string') {\n        popup = null;\n        throw new Error('Wrong reader.result type');\n      }\n      url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;');\n      if (popup) {\n        popup.location.href = url;\n      } else {\n        location.assign(url);\n      }\n      popup = null; // reverse-tabnabbing #460\n    };\n\n    reader.readAsDataURL(blob);\n  } else {\n    const url = URL.createObjectURL(blob);\n    if (popup) popup.location.assign(url);else location.href = url;\n    popup = null; // reverse-tabnabbing #460\n    setTimeout(function () {\n      URL.revokeObjectURL(url);\n    }, 4e4); // 40s\n  }\n}\n\n/**\r\n * Shows a toast or console.log\r\n *\r\n * @param message - message to log\r\n * @param type - different color of the tooltip\r\n */\nfunction toastMessage(message, type) {\n  const piniaMessage = 'üçç ' + message;\n  if (typeof __VUE_DEVTOOLS_TOAST__ === 'function') {\n    __VUE_DEVTOOLS_TOAST__(piniaMessage, type);\n  } else if (type === 'error') {\n    console.error(piniaMessage);\n  } else if (type === 'warn') {\n    console.warn(piniaMessage);\n  } else {\n    console.log(piniaMessage);\n  }\n}\nfunction isPinia(o) {\n  return '_a' in o && 'install' in o;\n}\nfunction checkClipboardAccess() {\n  if (!('clipboard' in navigator)) {\n    toastMessage(`Your browser doesn't support the Clipboard API`, 'error');\n    return true;\n  }\n}\nfunction checkNotFocusedError(error) {\n  if (error instanceof Error && error.message.toLowerCase().includes('document is not focused')) {\n    toastMessage('You need to activate the \"Emulate a focused page\" setting in the \"Rendering\" panel of devtools.', 'warn');\n    return true;\n  }\n  return false;\n}\nasync function actionGlobalCopyState(pinia) {\n  if (checkClipboardAccess()) return;\n  try {\n    await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));\n    toastMessage('Global state copied to clipboard.');\n  } catch (error) {\n    if (checkNotFocusedError(error)) return;\n    toastMessage(`Failed to serialize the state. Check the console for more details.`, 'error');\n    console.error(error);\n  }\n}\nasync function actionGlobalPasteState(pinia) {\n  if (checkClipboardAccess()) return;\n  try {\n    pinia.state.value = JSON.parse(await navigator.clipboard.readText());\n    toastMessage('Global state pasted from clipboard.');\n  } catch (error) {\n    if (checkNotFocusedError(error)) return;\n    toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, 'error');\n    console.error(error);\n  }\n}\nasync function actionGlobalSaveState(pinia) {\n  try {\n    saveAs(new Blob([JSON.stringify(pinia.state.value)], {\n      type: 'text/plain;charset=utf-8'\n    }), 'pinia-state.json');\n  } catch (error) {\n    toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');\n    console.error(error);\n  }\n}\nlet fileInput;\nfunction getFileOpener() {\n  if (!fileInput) {\n    fileInput = document.createElement('input');\n    fileInput.type = 'file';\n    fileInput.accept = '.json';\n  }\n  function openFile() {\n    return new Promise((resolve, reject) => {\n      fileInput.onchange = async () => {\n        const files = fileInput.files;\n        if (!files) return resolve(null);\n        const file = files.item(0);\n        if (!file) return resolve(null);\n        return resolve({\n          text: await file.text(),\n          file\n        });\n      };\n      // @ts-ignore: TODO: changed from 4.3 to 4.4\n      fileInput.oncancel = () => resolve(null);\n      fileInput.onerror = reject;\n      fileInput.click();\n    });\n  }\n  return openFile;\n}\nasync function actionGlobalOpenStateFile(pinia) {\n  try {\n    const open = await getFileOpener();\n    const result = await open();\n    if (!result) return;\n    const {\n      text,\n      file\n    } = result;\n    pinia.state.value = JSON.parse(text);\n    toastMessage(`Global state imported from \"${file.name}\".`);\n  } catch (error) {\n    toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');\n    console.error(error);\n  }\n}\nfunction formatDisplay(display) {\n  return {\n    _custom: {\n      display\n    }\n  };\n}\nconst PINIA_ROOT_LABEL = 'üçç Pinia (root)';\nconst PINIA_ROOT_ID = '_root';\nfunction formatStoreForInspectorTree(store) {\n  return isPinia(store) ? {\n    id: PINIA_ROOT_ID,\n    label: PINIA_ROOT_LABEL\n  } : {\n    id: store.$id,\n    label: store.$id\n  };\n}\nfunction formatStoreForInspectorState(store) {\n  if (isPinia(store)) {\n    const storeNames = Array.from(store._s.keys());\n    const storeMap = store._s;\n    const state = {\n      state: storeNames.map(storeId => ({\n        editable: true,\n        key: storeId,\n        value: store.state.value[storeId]\n      })),\n      getters: storeNames.filter(id => storeMap.get(id)._getters).map(id => {\n        const store = storeMap.get(id);\n        return {\n          editable: false,\n          key: id,\n          value: store._getters.reduce((getters, key) => {\n            getters[key] = store[key];\n            return getters;\n          }, {})\n        };\n      })\n    };\n    return state;\n  }\n  const state = {\n    state: Object.keys(store.$state).map(key => ({\n      editable: true,\n      key,\n      value: store.$state[key]\n    }))\n  };\n  // avoid adding empty getters\n  if (store._getters && store._getters.length) {\n    state.getters = store._getters.map(getterName => ({\n      editable: false,\n      key: getterName,\n      value: store[getterName]\n    }));\n  }\n  if (store._customProperties.size) {\n    state.customProperties = Array.from(store._customProperties).map(key => ({\n      editable: true,\n      key,\n      value: store[key]\n    }));\n  }\n  return state;\n}\nfunction formatEventData(events) {\n  if (!events) return {};\n  if (Array.isArray(events)) {\n    // TODO: handle add and delete for arrays and objects\n    return events.reduce((data, event) => {\n      data.keys.push(event.key);\n      data.operations.push(event.type);\n      data.oldValue[event.key] = event.oldValue;\n      data.newValue[event.key] = event.newValue;\n      return data;\n    }, {\n      oldValue: {},\n      keys: [],\n      operations: [],\n      newValue: {}\n    });\n  } else {\n    return {\n      operation: formatDisplay(events.type),\n      key: formatDisplay(events.key),\n      oldValue: events.oldValue,\n      newValue: events.newValue\n    };\n  }\n}\nfunction formatMutationType(type) {\n  switch (type) {\n    case MutationType.direct:\n      return 'mutation';\n    case MutationType.patchFunction:\n      return '$patch';\n    case MutationType.patchObject:\n      return '$patch';\n    default:\n      return 'unknown';\n  }\n}\n\n// timeline can be paused when directly changing the state\nlet isTimelineActive = true;\nconst componentStateTypes = [];\nconst MUTATIONS_LAYER_ID = 'pinia:mutations';\nconst INSPECTOR_ID = 'pinia';\nconst {\n  assign: assign$1\n} = Object;\n/**\r\n * Gets the displayed name of a store in devtools\r\n *\r\n * @param id - id of the store\r\n * @returns a formatted string\r\n */\nconst getStoreType = id => 'üçç ' + id;\n/**\r\n * Add the pinia plugin without any store. Allows displaying a Pinia plugin tab\r\n * as soon as it is added to the application.\r\n *\r\n * @param app - Vue application\r\n * @param pinia - pinia instance\r\n */\nfunction registerPiniaDevtools(app, pinia) {\n  setupDevtoolsPlugin({\n    id: 'dev.esm.pinia',\n    label: 'Pinia üçç',\n    logo: 'https://pinia.vuejs.org/logo.svg',\n    packageName: 'pinia',\n    homepage: 'https://pinia.vuejs.org',\n    componentStateTypes,\n    app\n  }, api => {\n    if (typeof api.now !== 'function') {\n      toastMessage('You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.');\n    }\n    api.addTimelineLayer({\n      id: MUTATIONS_LAYER_ID,\n      label: `Pinia üçç`,\n      color: 0xe5df88\n    });\n    api.addInspector({\n      id: INSPECTOR_ID,\n      label: 'Pinia üçç',\n      icon: 'storage',\n      treeFilterPlaceholder: 'Search stores',\n      actions: [{\n        icon: 'content_copy',\n        action: () => {\n          actionGlobalCopyState(pinia);\n        },\n        tooltip: 'Serialize and copy the state'\n      }, {\n        icon: 'content_paste',\n        action: async () => {\n          await actionGlobalPasteState(pinia);\n          api.sendInspectorTree(INSPECTOR_ID);\n          api.sendInspectorState(INSPECTOR_ID);\n        },\n        tooltip: 'Replace the state with the content of your clipboard'\n      }, {\n        icon: 'save',\n        action: () => {\n          actionGlobalSaveState(pinia);\n        },\n        tooltip: 'Save the state as a JSON file'\n      }, {\n        icon: 'folder_open',\n        action: async () => {\n          await actionGlobalOpenStateFile(pinia);\n          api.sendInspectorTree(INSPECTOR_ID);\n          api.sendInspectorState(INSPECTOR_ID);\n        },\n        tooltip: 'Import the state from a JSON file'\n      }],\n      nodeActions: [{\n        icon: 'restore',\n        tooltip: 'Reset the state (option store only)',\n        action: nodeId => {\n          const store = pinia._s.get(nodeId);\n          if (!store) {\n            toastMessage(`Cannot reset \"${nodeId}\" store because it wasn't found.`, 'warn');\n          } else if (!store._isOptionsAPI) {\n            toastMessage(`Cannot reset \"${nodeId}\" store because it's a setup store.`, 'warn');\n          } else {\n            store.$reset();\n            toastMessage(`Store \"${nodeId}\" reset.`);\n          }\n        }\n      }]\n    });\n    api.on.inspectComponent((payload, ctx) => {\n      const proxy = payload.componentInstance && payload.componentInstance.proxy;\n      if (proxy && proxy._pStores) {\n        const piniaStores = payload.componentInstance.proxy._pStores;\n        Object.values(piniaStores).forEach(store => {\n          payload.instanceData.state.push({\n            type: getStoreType(store.$id),\n            key: 'state',\n            editable: true,\n            value: store._isOptionsAPI ? {\n              _custom: {\n                value: toRaw(store.$state),\n                actions: [{\n                  icon: 'restore',\n                  tooltip: 'Reset the state of this store',\n                  action: () => store.$reset()\n                }]\n              }\n            } :\n            // NOTE: workaround to unwrap transferred refs\n            Object.keys(store.$state).reduce((state, key) => {\n              state[key] = store.$state[key];\n              return state;\n            }, {})\n          });\n          if (store._getters && store._getters.length) {\n            payload.instanceData.state.push({\n              type: getStoreType(store.$id),\n              key: 'getters',\n              editable: false,\n              value: store._getters.reduce((getters, key) => {\n                try {\n                  getters[key] = store[key];\n                } catch (error) {\n                  // @ts-expect-error: we just want to show it in devtools\n                  getters[key] = error;\n                }\n                return getters;\n              }, {})\n            });\n          }\n        });\n      }\n    });\n    api.on.getInspectorTree(payload => {\n      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n        let stores = [pinia];\n        stores = stores.concat(Array.from(pinia._s.values()));\n        payload.rootNodes = (payload.filter ? stores.filter(store => '$id' in store ? store.$id.toLowerCase().includes(payload.filter.toLowerCase()) : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase())) : stores).map(formatStoreForInspectorTree);\n      }\n    });\n    api.on.getInspectorState(payload => {\n      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);\n        if (!inspectedStore) {\n          // this could be the selected store restored for a different project\n          // so it's better not to say anything here\n          return;\n        }\n        if (inspectedStore) {\n          payload.state = formatStoreForInspectorState(inspectedStore);\n        }\n      }\n    });\n    api.on.editInspectorState((payload, ctx) => {\n      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);\n        if (!inspectedStore) {\n          return toastMessage(`store \"${payload.nodeId}\" not found`, 'error');\n        }\n        const {\n          path\n        } = payload;\n        if (!isPinia(inspectedStore)) {\n          // access only the state\n          if (path.length !== 1 || !inspectedStore._customProperties.has(path[0]) || path[0] in inspectedStore.$state) {\n            path.unshift('$state');\n          }\n        } else {\n          // Root access, we can omit the `.value` because the devtools API does it for us\n          path.unshift('state');\n        }\n        isTimelineActive = false;\n        payload.set(inspectedStore, path, payload.state.value);\n        isTimelineActive = true;\n      }\n    });\n    api.on.editComponentState(payload => {\n      if (payload.type.startsWith('üçç')) {\n        const storeId = payload.type.replace(/^üçç\\s*/, '');\n        const store = pinia._s.get(storeId);\n        if (!store) {\n          return toastMessage(`store \"${storeId}\" not found`, 'error');\n        }\n        const {\n          path\n        } = payload;\n        if (path[0] !== 'state') {\n          return toastMessage(`Invalid path for store \"${storeId}\":\\n${path}\\nOnly state can be modified.`);\n        }\n        // rewrite the first entry to be able to directly set the state as\n        // well as any other path\n        path[0] = '$state';\n        isTimelineActive = false;\n        payload.set(store, path, payload.state.value);\n        isTimelineActive = true;\n      }\n    });\n  });\n}\nfunction addStoreToDevtools(app, store) {\n  if (!componentStateTypes.includes(getStoreType(store.$id))) {\n    componentStateTypes.push(getStoreType(store.$id));\n  }\n  setupDevtoolsPlugin({\n    id: 'dev.esm.pinia',\n    label: 'Pinia üçç',\n    logo: 'https://pinia.vuejs.org/logo.svg',\n    packageName: 'pinia',\n    homepage: 'https://pinia.vuejs.org',\n    componentStateTypes,\n    app,\n    settings: {\n      logStoreChanges: {\n        label: 'Notify about new/deleted stores',\n        type: 'boolean',\n        defaultValue: true\n      }\n      // useEmojis: {\n      //   label: 'Use emojis in messages ‚ö°Ô∏è',\n      //   type: 'boolean',\n      //   defaultValue: true,\n      // },\n    }\n  }, api => {\n    // gracefully handle errors\n    const now = typeof api.now === 'function' ? api.now.bind(api) : Date.now;\n    store.$onAction(({\n      after,\n      onError,\n      name,\n      args\n    }) => {\n      const groupId = runningActionId++;\n      api.addTimelineEvent({\n        layerId: MUTATIONS_LAYER_ID,\n        event: {\n          time: now(),\n          title: 'üõ´ ' + name,\n          subtitle: 'start',\n          data: {\n            store: formatDisplay(store.$id),\n            action: formatDisplay(name),\n            args\n          },\n          groupId\n        }\n      });\n      after(result => {\n        activeAction = undefined;\n        api.addTimelineEvent({\n          layerId: MUTATIONS_LAYER_ID,\n          event: {\n            time: now(),\n            title: 'üõ¨ ' + name,\n            subtitle: 'end',\n            data: {\n              store: formatDisplay(store.$id),\n              action: formatDisplay(name),\n              args,\n              result\n            },\n            groupId\n          }\n        });\n      });\n      onError(error => {\n        activeAction = undefined;\n        api.addTimelineEvent({\n          layerId: MUTATIONS_LAYER_ID,\n          event: {\n            time: now(),\n            logType: 'error',\n            title: 'üí• ' + name,\n            subtitle: 'end',\n            data: {\n              store: formatDisplay(store.$id),\n              action: formatDisplay(name),\n              args,\n              error\n            },\n            groupId\n          }\n        });\n      });\n    }, true);\n    store._customProperties.forEach(name => {\n      watch(() => unref(store[name]), (newValue, oldValue) => {\n        api.notifyComponentUpdate();\n        api.sendInspectorState(INSPECTOR_ID);\n        if (isTimelineActive) {\n          api.addTimelineEvent({\n            layerId: MUTATIONS_LAYER_ID,\n            event: {\n              time: now(),\n              title: 'Change',\n              subtitle: name,\n              data: {\n                newValue,\n                oldValue\n              },\n              groupId: activeAction\n            }\n          });\n        }\n      }, {\n        deep: true\n      });\n    });\n    store.$subscribe(({\n      events,\n      type\n    }, state) => {\n      api.notifyComponentUpdate();\n      api.sendInspectorState(INSPECTOR_ID);\n      if (!isTimelineActive) return;\n      // rootStore.state[store.id] = state\n      const eventData = {\n        time: now(),\n        title: formatMutationType(type),\n        data: assign$1({\n          store: formatDisplay(store.$id)\n        }, formatEventData(events)),\n        groupId: activeAction\n      };\n      // reset for the next mutation\n      activeAction = undefined;\n      if (type === MutationType.patchFunction) {\n        eventData.subtitle = '‚§µÔ∏è';\n      } else if (type === MutationType.patchObject) {\n        eventData.subtitle = 'üß©';\n      } else if (events && !Array.isArray(events)) {\n        eventData.subtitle = events.type;\n      }\n      if (events) {\n        eventData.data['rawEvent(s)'] = {\n          _custom: {\n            display: 'DebuggerEvent',\n            type: 'object',\n            tooltip: 'raw DebuggerEvent[]',\n            value: events\n          }\n        };\n      }\n      api.addTimelineEvent({\n        layerId: MUTATIONS_LAYER_ID,\n        event: eventData\n      });\n    }, {\n      detached: true,\n      flush: 'sync'\n    });\n    const hotUpdate = store._hotUpdate;\n    store._hotUpdate = markRaw(newStore => {\n      hotUpdate(newStore);\n      api.addTimelineEvent({\n        layerId: MUTATIONS_LAYER_ID,\n        event: {\n          time: now(),\n          title: 'üî• ' + store.$id,\n          subtitle: 'HMR update',\n          data: {\n            store: formatDisplay(store.$id),\n            info: formatDisplay(`HMR update`)\n          }\n        }\n      });\n      // update the devtools too\n      api.notifyComponentUpdate();\n      api.sendInspectorTree(INSPECTOR_ID);\n      api.sendInspectorState(INSPECTOR_ID);\n    });\n    const {\n      $dispose\n    } = store;\n    store.$dispose = () => {\n      $dispose();\n      api.notifyComponentUpdate();\n      api.sendInspectorTree(INSPECTOR_ID);\n      api.sendInspectorState(INSPECTOR_ID);\n      api.getSettings().logStoreChanges && toastMessage(`Disposed \"${store.$id}\" store üóë`);\n    };\n    // trigger an update so it can display new registered stores\n    api.notifyComponentUpdate();\n    api.sendInspectorTree(INSPECTOR_ID);\n    api.sendInspectorState(INSPECTOR_ID);\n    api.getSettings().logStoreChanges && toastMessage(`\"${store.$id}\" store installed üÜï`);\n  });\n}\nlet runningActionId = 0;\nlet activeAction;\n/**\r\n * Patches a store to enable action grouping in devtools by wrapping the store with a Proxy that is passed as the\r\n * context of all actions, allowing us to set `runningAction` on each access and effectively associating any state\r\n * mutation to the action.\r\n *\r\n * @param store - store to patch\r\n * @param actionNames - list of actionst to patch\r\n */\nfunction patchActionForGrouping(store, actionNames) {\n  // original actions of the store as they are given by pinia. We are going to override them\n  const actions = actionNames.reduce((storeActions, actionName) => {\n    // use toRaw to avoid tracking #541\n    storeActions[actionName] = toRaw(store)[actionName];\n    return storeActions;\n  }, {});\n  for (const actionName in actions) {\n    store[actionName] = function () {\n      // setActivePinia(store._p)\n      // the running action id is incremented in a before action hook\n      const _actionId = runningActionId;\n      const trackedStore = new Proxy(store, {\n        get(...args) {\n          activeAction = _actionId;\n          return Reflect.get(...args);\n        },\n        set(...args) {\n          activeAction = _actionId;\n          return Reflect.set(...args);\n        }\n      });\n      return actions[actionName].apply(trackedStore, arguments);\n    };\n  }\n}\n/**\r\n * pinia.use(devtoolsPlugin)\r\n */\nfunction devtoolsPlugin({\n  app,\n  store,\n  options\n}) {\n  // HMR module\n  if (store.$id.startsWith('__hot:')) {\n    return;\n  }\n  // detect option api vs setup api\n  if (options.state) {\n    store._isOptionsAPI = true;\n  }\n  // only wrap actions in option-defined stores as this technique relies on\n  // wrapping the context of the action with a proxy\n  if (typeof options.state === 'function') {\n    patchActionForGrouping(\n    // @ts-expect-error: can cast the store...\n    store, Object.keys(options.actions));\n    const originalHotUpdate = store._hotUpdate;\n    // Upgrade the HMR to also update the new actions\n    toRaw(store)._hotUpdate = function (newStore) {\n      originalHotUpdate.apply(this, arguments);\n      patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions));\n    };\n  }\n  addStoreToDevtools(app,\n  // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?\n  store);\n}\n\n/**\r\n * Creates a Pinia instance to be used by the application\r\n */\nfunction createPinia() {\n  const scope = effectScope(true);\n  // NOTE: here we could check the window object for a state and directly set it\n  // if there is anything like it with Vue 3 SSR\n  const state = scope.run(() => ref({}));\n  let _p = [];\n  // plugins added before calling app.use(pinia)\n  let toBeInstalled = [];\n  const pinia = markRaw({\n    install(app) {\n      // this allows calling useStore() outside of a component setup after\n      // installing pinia's plugin\n      setActivePinia(pinia);\n      if (!isVue2) {\n        pinia._a = app;\n        app.provide(piniaSymbol, pinia);\n        app.config.globalProperties.$pinia = pinia;\n        /* istanbul ignore else */\n        if (USE_DEVTOOLS) {\n          registerPiniaDevtools(app, pinia);\n        }\n        toBeInstalled.forEach(plugin => _p.push(plugin));\n        toBeInstalled = [];\n      }\n    },\n    use(plugin) {\n      if (!this._a && !isVue2) {\n        toBeInstalled.push(plugin);\n      } else {\n        _p.push(plugin);\n      }\n      return this;\n    },\n    _p,\n    // it's actually undefined here\n    // @ts-expect-error\n    _a: null,\n    _e: scope,\n    _s: new Map(),\n    state\n  });\n  // pinia devtools rely on dev only features so they cannot be forced unless\n  // the dev build of Vue is used. Avoid old browsers like IE11.\n  if (USE_DEVTOOLS && typeof Proxy !== 'undefined') {\n    pinia.use(devtoolsPlugin);\n  }\n  return pinia;\n}\n\n/**\r\n * Checks if a function is a `StoreDefinition`.\r\n *\r\n * @param fn - object to test\r\n * @returns true if `fn` is a StoreDefinition\r\n */\nconst isUseStore = fn => {\n  return typeof fn === 'function' && typeof fn.$id === 'string';\n};\n/**\r\n * Mutates in place `newState` with `oldState` to _hot update_ it. It will\r\n * remove any key not existing in `newState` and recursively merge plain\r\n * objects.\r\n *\r\n * @param newState - new state object to be patched\r\n * @param oldState - old state that should be used to patch newState\r\n * @returns - newState\r\n */\nfunction patchObject(newState, oldState) {\n  // no need to go through symbols because they cannot be serialized anyway\n  for (const key in oldState) {\n    const subPatch = oldState[key];\n    // skip the whole sub tree\n    if (!(key in newState)) {\n      continue;\n    }\n    const targetValue = newState[key];\n    if (isPlainObject(targetValue) && isPlainObject(subPatch) && !isRef(subPatch) && !isReactive(subPatch)) {\n      newState[key] = patchObject(targetValue, subPatch);\n    } else {\n      // objects are either a bit more complex (e.g. refs) or primitives, so we\n      // just set the whole thing\n      if (isVue2) {\n        set(newState, key, subPatch);\n      } else {\n        newState[key] = subPatch;\n      }\n    }\n  }\n  return newState;\n}\n/**\r\n * Creates an _accept_ function to pass to `import.meta.hot` in Vite applications.\r\n *\r\n * @example\r\n * ```js\r\n * const useUser = defineStore(...)\r\n * if (import.meta.hot) {\r\n *   import.meta.hot.accept(acceptHMRUpdate(useUser, import.meta.hot))\r\n * }\r\n * ```\r\n *\r\n * @param initialUseStore - return of the defineStore to hot update\r\n * @param hot - `import.meta.hot`\r\n */\nfunction acceptHMRUpdate(initialUseStore, hot) {\n  // strip as much as possible from iife.prod\n  if (!(process.env.NODE_ENV !== 'production')) {\n    return () => {};\n  }\n  return newModule => {\n    const pinia = hot.data.pinia || initialUseStore._pinia;\n    if (!pinia) {\n      // this store is still not used\n      return;\n    }\n    // preserve the pinia instance across loads\n    hot.data.pinia = pinia;\n    // console.log('got data', newStore)\n    for (const exportName in newModule) {\n      const useStore = newModule[exportName];\n      // console.log('checking for', exportName)\n      if (isUseStore(useStore) && pinia._s.has(useStore.$id)) {\n        // console.log('Accepting update for', useStore.$id)\n        const id = useStore.$id;\n        if (id !== initialUseStore.$id) {\n          console.warn(`The id of the store changed from \"${initialUseStore.$id}\" to \"${id}\". Reloading.`);\n          // return import.meta.hot.invalidate()\n          return hot.invalidate();\n        }\n        const existingStore = pinia._s.get(id);\n        if (!existingStore) {\n          console.log(`[Pinia]: skipping hmr because store doesn't exist yet`);\n          return;\n        }\n        useStore(pinia, existingStore);\n      }\n    }\n  };\n}\nconst noop = () => {};\nfunction addSubscription(subscriptions, callback, detached, onCleanup = noop) {\n  subscriptions.push(callback);\n  const removeSubscription = () => {\n    const idx = subscriptions.indexOf(callback);\n    if (idx > -1) {\n      subscriptions.splice(idx, 1);\n      onCleanup();\n    }\n  };\n  if (!detached && getCurrentScope()) {\n    onScopeDispose(removeSubscription);\n  }\n  return removeSubscription;\n}\nfunction triggerSubscriptions(subscriptions, ...args) {\n  subscriptions.slice().forEach(callback => {\n    callback(...args);\n  });\n}\nfunction mergeReactiveObjects(target, patchToApply) {\n  // Handle Map instances\n  if (target instanceof Map && patchToApply instanceof Map) {\n    patchToApply.forEach((value, key) => target.set(key, value));\n  }\n  // Handle Set instances\n  if (target instanceof Set && patchToApply instanceof Set) {\n    patchToApply.forEach(target.add, target);\n  }\n  // no need to go through symbols because they cannot be serialized anyway\n  for (const key in patchToApply) {\n    if (!patchToApply.hasOwnProperty(key)) continue;\n    const subPatch = patchToApply[key];\n    const targetValue = target[key];\n    if (isPlainObject(targetValue) && isPlainObject(subPatch) && target.hasOwnProperty(key) && !isRef(subPatch) && !isReactive(subPatch)) {\n      // NOTE: here I wanted to warn about inconsistent types but it's not possible because in setup stores one might\n      // start the value of a property as a certain type e.g. a Map, and then for some reason, during SSR, change that\n      // to `undefined`. When trying to hydrate, we want to override the Map with `undefined`.\n      target[key] = mergeReactiveObjects(targetValue, subPatch);\n    } else {\n      // @ts-expect-error: subPatch is a valid value\n      target[key] = subPatch;\n    }\n  }\n  return target;\n}\nconst skipHydrateSymbol = process.env.NODE_ENV !== 'production' ? Symbol('pinia:skipHydration') : /* istanbul ignore next */Symbol();\nconst skipHydrateMap = /*#__PURE__*/new WeakMap();\n/**\r\n * Tells Pinia to skip the hydration process of a given object. This is useful in setup stores (only) when you return a\r\n * stateful object in the store but it isn't really state. e.g. returning a router instance in a setup store.\r\n *\r\n * @param obj - target object\r\n * @returns obj\r\n */\nfunction skipHydrate(obj) {\n  return isVue2 ?\n  // in @vue/composition-api, the refs are sealed so defineProperty doesn't work...\n  /* istanbul ignore next */\n  skipHydrateMap.set(obj, 1) && obj : Object.defineProperty(obj, skipHydrateSymbol, {});\n}\n/**\r\n * Returns whether a value should be hydrated\r\n *\r\n * @param obj - target variable\r\n * @returns true if `obj` should be hydrated\r\n */\nfunction shouldHydrate(obj) {\n  return isVue2 ? /* istanbul ignore next */!skipHydrateMap.has(obj) : !isPlainObject(obj) || !obj.hasOwnProperty(skipHydrateSymbol);\n}\nconst {\n  assign\n} = Object;\nfunction isComputed(o) {\n  return !!(isRef(o) && o.effect);\n}\nfunction createOptionsStore(id, options, pinia, hot) {\n  const {\n    state,\n    actions,\n    getters\n  } = options;\n  const initialState = pinia.state.value[id];\n  let store;\n  function setup() {\n    if (!initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\n      /* istanbul ignore if */\n      if (isVue2) {\n        set(pinia.state.value, id, state ? state() : {});\n      } else {\n        pinia.state.value[id] = state ? state() : {};\n      }\n    }\n    // avoid creating a state in pinia.state.value\n    const localState = process.env.NODE_ENV !== 'production' && hot ?\n    // use ref() to unwrap refs inside state TODO: check if this is still necessary\n    toRefs(ref(state ? state() : {}).value) : toRefs(pinia.state.value[id]);\n    return assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {\n      if (process.env.NODE_ENV !== 'production' && name in localState) {\n        console.warn(`[üçç]: A getter cannot have the same name as another state property. Rename one of them. Found with \"${name}\" in store \"${id}\".`);\n      }\n      computedGetters[name] = markRaw(computed(() => {\n        setActivePinia(pinia);\n        // it was created just before\n        const store = pinia._s.get(id);\n        // allow cross using stores\n        /* istanbul ignore next */\n        if (isVue2 && !store._r) return;\n        // @ts-expect-error\n        // return getters![name].call(context, context)\n        // TODO: avoid reading the getter while assigning with a global variable\n        return getters[name].call(store, store);\n      }));\n      return computedGetters;\n    }, {}));\n  }\n  store = createSetupStore(id, setup, options, pinia, hot, true);\n  store.$reset = function $reset() {\n    const newState = state ? state() : {};\n    // we use a patch to group all changes into one single subscription\n    this.$patch($state => {\n      assign($state, newState);\n    });\n  };\n  return store;\n}\nfunction createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {\n  let scope;\n  const optionsForPlugin = assign({\n    actions: {}\n  }, options);\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && !pinia._e.active) {\n    throw new Error('Pinia destroyed');\n  }\n  // watcher options for $subscribe\n  const $subscribeOptions = {\n    deep: true\n    // flush: 'post',\n  };\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production' && !isVue2) {\n    $subscribeOptions.onTrigger = event => {\n      /* istanbul ignore else */\n      if (isListening) {\n        debuggerEvents = event;\n        // avoid triggering this while the store is being built and the state is being set in pinia\n      } else if (isListening == false && !store._hotUpdating) {\n        // let patch send all the events together later\n        /* istanbul ignore else */\n        if (Array.isArray(debuggerEvents)) {\n          debuggerEvents.push(event);\n        } else {\n          console.error('üçç debuggerEvents should be an array. This is most likely an internal Pinia bug.');\n        }\n      }\n    };\n  }\n  // internal state\n  let isListening; // set to true at the end\n  let isSyncListening; // set to true at the end\n  let subscriptions = markRaw([]);\n  let actionSubscriptions = markRaw([]);\n  let debuggerEvents;\n  const initialState = pinia.state.value[$id];\n  // avoid setting the state for option stores if it is set\n  // by the setup\n  if (!isOptionsStore && !initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\n    /* istanbul ignore if */\n    if (isVue2) {\n      set(pinia.state.value, $id, {});\n    } else {\n      pinia.state.value[$id] = {};\n    }\n  }\n  const hotState = ref({});\n  // avoid triggering too many listeners\n  // https://github.com/vuejs/pinia/issues/1129\n  let activeListener;\n  function $patch(partialStateOrMutator) {\n    let subscriptionMutation;\n    isListening = isSyncListening = false;\n    // reset the debugger events since patches are sync\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      debuggerEvents = [];\n    }\n    if (typeof partialStateOrMutator === 'function') {\n      partialStateOrMutator(pinia.state.value[$id]);\n      subscriptionMutation = {\n        type: MutationType.patchFunction,\n        storeId: $id,\n        events: debuggerEvents\n      };\n    } else {\n      mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);\n      subscriptionMutation = {\n        type: MutationType.patchObject,\n        payload: partialStateOrMutator,\n        storeId: $id,\n        events: debuggerEvents\n      };\n    }\n    const myListenerId = activeListener = Symbol();\n    nextTick().then(() => {\n      if (activeListener === myListenerId) {\n        isListening = true;\n      }\n    });\n    isSyncListening = true;\n    // because we paused the watcher, we need to manually call the subscriptions\n    triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);\n  }\n  /* istanbul ignore next */\n  const $reset = process.env.NODE_ENV !== 'production' ? () => {\n    throw new Error(`üçç: Store \"${$id}\" is built using the setup syntax and does not implement $reset().`);\n  } : noop;\n  function $dispose() {\n    scope.stop();\n    subscriptions = [];\n    actionSubscriptions = [];\n    pinia._s.delete($id);\n  }\n  /**\r\n   * Wraps an action to handle subscriptions.\r\n   *\r\n   * @param name - name of the action\r\n   * @param action - action to wrap\r\n   * @returns a wrapped action to handle subscriptions\r\n   */\n  function wrapAction(name, action) {\n    return function () {\n      setActivePinia(pinia);\n      const args = Array.from(arguments);\n      const afterCallbackList = [];\n      const onErrorCallbackList = [];\n      function after(callback) {\n        afterCallbackList.push(callback);\n      }\n      function onError(callback) {\n        onErrorCallbackList.push(callback);\n      }\n      // @ts-expect-error\n      triggerSubscriptions(actionSubscriptions, {\n        args,\n        name,\n        store,\n        after,\n        onError\n      });\n      let ret;\n      try {\n        ret = action.apply(this && this.$id === $id ? this : store, args);\n        // handle sync errors\n      } catch (error) {\n        triggerSubscriptions(onErrorCallbackList, error);\n        throw error;\n      }\n      if (ret instanceof Promise) {\n        return ret.then(value => {\n          triggerSubscriptions(afterCallbackList, value);\n          return value;\n        }).catch(error => {\n          triggerSubscriptions(onErrorCallbackList, error);\n          return Promise.reject(error);\n        });\n      }\n      // trigger after callbacks\n      triggerSubscriptions(afterCallbackList, ret);\n      return ret;\n    };\n  }\n  const _hmrPayload = /*#__PURE__*/markRaw({\n    actions: {},\n    getters: {},\n    state: [],\n    hotState\n  });\n  const partialStore = {\n    _p: pinia,\n    // _s: scope,\n    $id,\n    $onAction: addSubscription.bind(null, actionSubscriptions),\n    $patch,\n    $reset,\n    $subscribe(callback, options = {}) {\n      const removeSubscription = addSubscription(subscriptions, callback, options.detached, () => stopWatcher());\n      const stopWatcher = scope.run(() => watch(() => pinia.state.value[$id], state => {\n        if (options.flush === 'sync' ? isSyncListening : isListening) {\n          callback({\n            storeId: $id,\n            type: MutationType.direct,\n            events: debuggerEvents\n          }, state);\n        }\n      }, assign({}, $subscribeOptions, options)));\n      return removeSubscription;\n    },\n    $dispose\n  };\n  /* istanbul ignore if */\n  if (isVue2) {\n    // start as non ready\n    partialStore._r = false;\n  }\n  const store = reactive(process.env.NODE_ENV !== 'production' || USE_DEVTOOLS ? assign({\n    _hmrPayload,\n    _customProperties: markRaw(new Set()) // devtools custom properties\n  }, partialStore\n  // must be added later\n  // setupStore\n  ) : partialStore);\n  // store the partial store now so the setup of stores can instantiate each other before they are finished without\n  // creating infinite loops.\n  pinia._s.set($id, store);\n  // TODO: idea create skipSerialize that marks properties as non serializable and they are skipped\n  const setupStore = pinia._e.run(() => {\n    scope = effectScope();\n    return scope.run(() => setup());\n  });\n  // overwrite existing actions to support $onAction\n  for (const key in setupStore) {\n    const prop = setupStore[key];\n    if (isRef(prop) && !isComputed(prop) || isReactive(prop)) {\n      // mark it as a piece of state to be serialized\n      if (process.env.NODE_ENV !== 'production' && hot) {\n        set(hotState.value, key, toRef(setupStore, key));\n        // createOptionStore directly sets the state in pinia.state.value so we\n        // can just skip that\n      } else if (!isOptionsStore) {\n        // in setup stores we must hydrate the state and sync pinia state tree with the refs the user just created\n        if (initialState && shouldHydrate(prop)) {\n          if (isRef(prop)) {\n            prop.value = initialState[key];\n          } else {\n            // probably a reactive object, lets recursively assign\n            // @ts-expect-error: prop is unknown\n            mergeReactiveObjects(prop, initialState[key]);\n          }\n        }\n        // transfer the ref to the pinia state to keep everything in sync\n        /* istanbul ignore if */\n        if (isVue2) {\n          set(pinia.state.value[$id], key, prop);\n        } else {\n          pinia.state.value[$id][key] = prop;\n        }\n      }\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        _hmrPayload.state.push(key);\n      }\n      // action\n    } else if (typeof prop === 'function') {\n      // @ts-expect-error: we are overriding the function we avoid wrapping if\n      const actionValue = process.env.NODE_ENV !== 'production' && hot ? prop : wrapAction(key, prop);\n      // this a hot module replacement store because the hotUpdate method needs\n      // to do it with the right context\n      /* istanbul ignore if */\n      if (isVue2) {\n        set(setupStore, key, actionValue);\n      } else {\n        // @ts-expect-error\n        setupStore[key] = actionValue;\n      }\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        _hmrPayload.actions[key] = prop;\n      }\n      // list actions so they can be used in plugins\n      // @ts-expect-error\n      optionsForPlugin.actions[key] = prop;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // add getters for devtools\n      if (isComputed(prop)) {\n        _hmrPayload.getters[key] = isOptionsStore ?\n        // @ts-expect-error\n        options.getters[key] : prop;\n        if (IS_CLIENT) {\n          const getters = setupStore._getters || (\n          // @ts-expect-error: same\n          setupStore._getters = markRaw([]));\n          getters.push(key);\n        }\n      }\n    }\n  }\n  // add the state, getters, and action properties\n  /* istanbul ignore if */\n  if (isVue2) {\n    Object.keys(setupStore).forEach(key => {\n      set(store, key, setupStore[key]);\n    });\n  } else {\n    assign(store, setupStore);\n    // allows retrieving reactive objects with `storeToRefs()`. Must be called after assigning to the reactive object.\n    // Make `storeToRefs()` work with `reactive()` #799\n    assign(toRaw(store), setupStore);\n  }\n  // use this instead of a computed with setter to be able to create it anywhere\n  // without linking the computed lifespan to wherever the store is first\n  // created.\n  Object.defineProperty(store, '$state', {\n    get: () => process.env.NODE_ENV !== 'production' && hot ? hotState.value : pinia.state.value[$id],\n    set: state => {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && hot) {\n        throw new Error('cannot set hotState');\n      }\n      $patch($state => {\n        assign($state, state);\n      });\n    }\n  });\n  // add the hotUpdate before plugins to allow them to override it\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    store._hotUpdate = markRaw(newStore => {\n      store._hotUpdating = true;\n      newStore._hmrPayload.state.forEach(stateKey => {\n        if (stateKey in store.$state) {\n          const newStateTarget = newStore.$state[stateKey];\n          const oldStateSource = store.$state[stateKey];\n          if (typeof newStateTarget === 'object' && isPlainObject(newStateTarget) && isPlainObject(oldStateSource)) {\n            patchObject(newStateTarget, oldStateSource);\n          } else {\n            // transfer the ref\n            newStore.$state[stateKey] = oldStateSource;\n          }\n        }\n        // patch direct access properties to allow store.stateProperty to work as\n        // store.$state.stateProperty\n        set(store, stateKey, toRef(newStore.$state, stateKey));\n      });\n      // remove deleted state properties\n      Object.keys(store.$state).forEach(stateKey => {\n        if (!(stateKey in newStore.$state)) {\n          del(store, stateKey);\n        }\n      });\n      // avoid devtools logging this as a mutation\n      isListening = false;\n      isSyncListening = false;\n      pinia.state.value[$id] = toRef(newStore._hmrPayload, 'hotState');\n      isSyncListening = true;\n      nextTick().then(() => {\n        isListening = true;\n      });\n      for (const actionName in newStore._hmrPayload.actions) {\n        const action = newStore[actionName];\n        set(store, actionName, wrapAction(actionName, action));\n      }\n      // TODO: does this work in both setup and option store?\n      for (const getterName in newStore._hmrPayload.getters) {\n        const getter = newStore._hmrPayload.getters[getterName];\n        const getterValue = isOptionsStore ?\n        // special handling of options api\n        computed(() => {\n          setActivePinia(pinia);\n          return getter.call(store, store);\n        }) : getter;\n        set(store, getterName, getterValue);\n      }\n      // remove deleted getters\n      Object.keys(store._hmrPayload.getters).forEach(key => {\n        if (!(key in newStore._hmrPayload.getters)) {\n          del(store, key);\n        }\n      });\n      // remove old actions\n      Object.keys(store._hmrPayload.actions).forEach(key => {\n        if (!(key in newStore._hmrPayload.actions)) {\n          del(store, key);\n        }\n      });\n      // update the values used in devtools and to allow deleting new properties later on\n      store._hmrPayload = newStore._hmrPayload;\n      store._getters = newStore._getters;\n      store._hotUpdating = false;\n    });\n  }\n  if (USE_DEVTOOLS) {\n    const nonEnumerable = {\n      writable: true,\n      configurable: true,\n      // avoid warning on devtools trying to display this property\n      enumerable: false\n    };\n    ['_p', '_hmrPayload', '_getters', '_customProperties'].forEach(p => {\n      Object.defineProperty(store, p, assign({\n        value: store[p]\n      }, nonEnumerable));\n    });\n  }\n  /* istanbul ignore if */\n  if (isVue2) {\n    // mark the store as ready before plugins\n    store._r = true;\n  }\n  // apply all plugins\n  pinia._p.forEach(extender => {\n    /* istanbul ignore else */\n    if (USE_DEVTOOLS) {\n      const extensions = scope.run(() => extender({\n        store,\n        app: pinia._a,\n        pinia,\n        options: optionsForPlugin\n      }));\n      Object.keys(extensions || {}).forEach(key => store._customProperties.add(key));\n      assign(store, extensions);\n    } else {\n      assign(store, scope.run(() => extender({\n        store,\n        app: pinia._a,\n        pinia,\n        options: optionsForPlugin\n      })));\n    }\n  });\n  if (process.env.NODE_ENV !== 'production' && store.$state && typeof store.$state === 'object' && typeof store.$state.constructor === 'function' && !store.$state.constructor.toString().includes('[native code]')) {\n    console.warn(`[üçç]: The \"state\" must be a plain object. It cannot be\\n` + `\\tstate: () => new MyClass()\\n` + `Found in store \"${store.$id}\".`);\n  }\n  // only apply hydrate to option stores with an initial state in pinia\n  if (initialState && isOptionsStore && options.hydrate) {\n    options.hydrate(store.$state, initialState);\n  }\n  isListening = true;\n  isSyncListening = true;\n  return store;\n}\nfunction defineStore(\n// TODO: add proper types from above\nidOrOptions, setup, setupOptions) {\n  let id;\n  let options;\n  const isSetupStore = typeof setup === 'function';\n  if (typeof idOrOptions === 'string') {\n    id = idOrOptions;\n    // the option store setup will contain the actual options in this case\n    options = isSetupStore ? setupOptions : setup;\n  } else {\n    options = idOrOptions;\n    id = idOrOptions.id;\n  }\n  function useStore(pinia, hot) {\n    const currentInstance = getCurrentInstance();\n    pinia =\n    // in test mode, ignore the argument provided as we can always retrieve a\n    // pinia instance with getActivePinia()\n    (process.env.NODE_ENV === 'test' && activePinia && activePinia._testing ? null : pinia) || currentInstance && inject(piniaSymbol, null);\n    if (pinia) setActivePinia(pinia);\n    if (process.env.NODE_ENV !== 'production' && !activePinia) {\n      throw new Error(`[üçç]: getActivePinia was called with no active Pinia. Did you forget to install pinia?\\n` + `\\tconst pinia = createPinia()\\n` + `\\tapp.use(pinia)\\n` + `This will fail in production.`);\n    }\n    pinia = activePinia;\n    if (!pinia._s.has(id)) {\n      // creating the store registers it in `pinia._s`\n      if (isSetupStore) {\n        createSetupStore(id, setup, options, pinia);\n      } else {\n        createOptionsStore(id, options, pinia);\n      }\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        // @ts-expect-error: not the right inferred type\n        useStore._pinia = pinia;\n      }\n    }\n    const store = pinia._s.get(id);\n    if (process.env.NODE_ENV !== 'production' && hot) {\n      const hotId = '__hot:' + id;\n      const newStore = isSetupStore ? createSetupStore(hotId, setup, options, pinia, true) : createOptionsStore(hotId, assign({}, options), pinia, true);\n      hot._hotUpdate(newStore);\n      // cleanup the state properties and the store from the cache\n      delete pinia.state.value[hotId];\n      pinia._s.delete(hotId);\n    }\n    // save stores in instances to access them devtools\n    if (process.env.NODE_ENV !== 'production' && IS_CLIENT && currentInstance && currentInstance.proxy &&\n    // avoid adding stores that are just built for hot module replacement\n    !hot) {\n      const vm = currentInstance.proxy;\n      const cache = '_pStores' in vm ? vm._pStores : vm._pStores = {};\n      cache[id] = store;\n    }\n    // StoreGeneric cannot be casted towards Store\n    return store;\n  }\n  useStore.$id = id;\n  return useStore;\n}\nlet mapStoreSuffix = 'Store';\n/**\r\n * Changes the suffix added by `mapStores()`. Can be set to an empty string.\r\n * Defaults to `\"Store\"`. Make sure to extend the MapStoresCustomization\r\n * interface if you are using TypeScript.\r\n *\r\n * @param suffix - new suffix\r\n */\nfunction setMapStoreSuffix(suffix // could be 'Store' but that would be annoying for JS\n) {\n  mapStoreSuffix = suffix;\n}\n/**\r\n * Allows using stores without the composition API (`setup()`) by generating an\r\n * object to be spread in the `computed` field of a component. It accepts a list\r\n * of store definitions.\r\n *\r\n * @example\r\n * ```js\r\n * export default {\r\n *   computed: {\r\n *     // other computed properties\r\n *     ...mapStores(useUserStore, useCartStore)\r\n *   },\r\n *\r\n *   created() {\r\n *     this.userStore // store with id \"user\"\r\n *     this.cartStore // store with id \"cart\"\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @param stores - list of stores to map to an object\r\n */\nfunction mapStores(...stores) {\n  if (process.env.NODE_ENV !== 'production' && Array.isArray(stores[0])) {\n    console.warn(`[üçç]: Directly pass all stores to \"mapStores()\" without putting them in an array:\\n` + `Replace\\n` + `\\tmapStores([useAuthStore, useCartStore])\\n` + `with\\n` + `\\tmapStores(useAuthStore, useCartStore)\\n` + `This will fail in production if not fixed.`);\n    stores = stores[0];\n  }\n  return stores.reduce((reduced, useStore) => {\n    // @ts-expect-error: $id is added by defineStore\n    reduced[useStore.$id + mapStoreSuffix] = function () {\n      return useStore(this.$pinia);\n    };\n    return reduced;\n  }, {});\n}\n/**\r\n * Allows using state and getters from one store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `computed` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\nfunction mapState(useStore, keysOrMapper) {\n  return Array.isArray(keysOrMapper) ? keysOrMapper.reduce((reduced, key) => {\n    reduced[key] = function () {\n      return useStore(this.$pinia)[key];\n    };\n    return reduced;\n  }, {}) : Object.keys(keysOrMapper).reduce((reduced, key) => {\n    // @ts-expect-error\n    reduced[key] = function () {\n      const store = useStore(this.$pinia);\n      const storeKey = keysOrMapper[key];\n      // for some reason TS is unable to infer the type of storeKey to be a\n      // function\n      return typeof storeKey === 'function' ? storeKey.call(this, store) : store[storeKey];\n    };\n    return reduced;\n  }, {});\n}\n/**\r\n * Alias for `mapState()`. You should use `mapState()` instead.\r\n * @deprecated use `mapState()` instead.\r\n */\nconst mapGetters = mapState;\n/**\r\n * Allows directly using actions from your store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `methods` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\nfunction mapActions(useStore, keysOrMapper) {\n  return Array.isArray(keysOrMapper) ? keysOrMapper.reduce((reduced, key) => {\n    // @ts-expect-error\n    reduced[key] = function (...args) {\n      return useStore(this.$pinia)[key](...args);\n    };\n    return reduced;\n  }, {}) : Object.keys(keysOrMapper).reduce((reduced, key) => {\n    // @ts-expect-error\n    reduced[key] = function (...args) {\n      return useStore(this.$pinia)[keysOrMapper[key]](...args);\n    };\n    return reduced;\n  }, {});\n}\n/**\r\n * Allows using state and getters from one store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `computed` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\nfunction mapWritableState(useStore, keysOrMapper) {\n  return Array.isArray(keysOrMapper) ? keysOrMapper.reduce((reduced, key) => {\n    // @ts-ignore\n    reduced[key] = {\n      get() {\n        return useStore(this.$pinia)[key];\n      },\n      set(value) {\n        // it's easier to type it here as any\n        return useStore(this.$pinia)[key] = value;\n      }\n    };\n    return reduced;\n  }, {}) : Object.keys(keysOrMapper).reduce((reduced, key) => {\n    // @ts-ignore\n    reduced[key] = {\n      get() {\n        return useStore(this.$pinia)[keysOrMapper[key]];\n      },\n      set(value) {\n        // it's easier to type it here as any\n        return useStore(this.$pinia)[keysOrMapper[key]] = value;\n      }\n    };\n    return reduced;\n  }, {});\n}\n\n/**\r\n * Creates an object of references with all the state, getters, and plugin-added\r\n * state properties of the store. Similar to `toRefs()` but specifically\r\n * designed for Pinia stores so methods and non reactive properties are\r\n * completely ignored.\r\n *\r\n * @param store - store to extract the refs from\r\n */\nfunction storeToRefs(store) {\n  // See https://github.com/vuejs/pinia/issues/852\n  // It's easier to just use toRefs() even if it includes more stuff\n  if (isVue2) {\n    // @ts-expect-error: toRefs include methods and others\n    return toRefs(store);\n  } else {\n    store = toRaw(store);\n    const refs = {};\n    for (const key in store) {\n      const value = store[key];\n      if (isRef(value) || isReactive(value)) {\n        // @ts-expect-error: the key is state or getter\n        refs[key] =\n        // ---\n        toRef(store, key);\n      }\n    }\n    return refs;\n  }\n}\n\n/**\r\n * Vue 2 Plugin that must be installed for pinia to work. Note **you don't need\r\n * this plugin if you are using Nuxt.js**. Use the `buildModule` instead:\r\n * https://pinia.vuejs.org/ssr/nuxt.html.\r\n *\r\n * @example\r\n * ```js\r\n * import Vue from 'vue'\r\n * import { PiniaVuePlugin, createPinia } from 'pinia'\r\n *\r\n * Vue.use(PiniaVuePlugin)\r\n * const pinia = createPinia()\r\n *\r\n * new Vue({\r\n *   el: '#app',\r\n *   // ...\r\n *   pinia,\r\n * })\r\n * ```\r\n *\r\n * @param _Vue - `Vue` imported from 'vue'.\r\n */\nconst PiniaVuePlugin = function (_Vue) {\n  // Equivalent of\n  // app.config.globalProperties.$pinia = pinia\n  _Vue.mixin({\n    beforeCreate() {\n      const options = this.$options;\n      if (options.pinia) {\n        const pinia = options.pinia;\n        // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/main/src/apis/inject.ts#L31\n        /* istanbul ignore else */\n        if (!this._provided) {\n          const provideCache = {};\n          Object.defineProperty(this, '_provided', {\n            get: () => provideCache,\n            set: v => Object.assign(provideCache, v)\n          });\n        }\n        this._provided[piniaSymbol] = pinia;\n        // propagate the pinia instance in an SSR friendly way\n        // avoid adding it to nuxt twice\n        /* istanbul ignore else */\n        if (!this.$pinia) {\n          this.$pinia = pinia;\n        }\n        pinia._a = this;\n        if (IS_CLIENT) {\n          // this allows calling useStore() outside of a component setup after\n          // installing pinia's plugin\n          setActivePinia(pinia);\n        }\n        if (USE_DEVTOOLS) {\n          registerPiniaDevtools(pinia._a, pinia);\n        }\n      } else if (!this.$pinia && options.parent && options.parent.$pinia) {\n        this.$pinia = options.parent.$pinia;\n      }\n    },\n    destroyed() {\n      delete this._pStores;\n    }\n  });\n};\nexport { MutationType, PiniaVuePlugin, acceptHMRUpdate, createPinia, defineStore, getActivePinia, mapActions, mapGetters, mapState, mapStores, mapWritableState, setActivePinia, setMapStoreSuffix, skipHydrate, storeToRefs };","map":{"version":3,"names":["getCurrentInstance","inject","toRaw","watch","unref","markRaw","effectScope","ref","isVue2","isRef","isReactive","set","getCurrentScope","onScopeDispose","reactive","toRef","del","nextTick","computed","toRefs","setupDevtoolsPlugin","activePinia","setActivePinia","pinia","getActivePinia","piniaSymbol","process","env","NODE_ENV","Symbol","isPlainObject","o","Object","prototype","toString","call","toJSON","MutationType","IS_CLIENT","window","USE_DEVTOOLS","__VUE_PROD_DEVTOOLS__","_global","self","global","globalThis","HTMLElement","bom","blob","autoBom","test","type","Blob","String","fromCharCode","download","url","name","opts","xhr","XMLHttpRequest","open","responseType","onload","saveAs","response","onerror","console","error","send","corsEnabled","e","status","click","node","dispatchEvent","MouseEvent","evt","document","createEvent","initMouseEvent","_navigator","navigator","userAgent","isMacOSWebView","HTMLAnchorElement","downloadSaveAs","msSaveAs","fileSaverSaveAs","a","createElement","rel","href","origin","location","target","URL","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","popup","title","body","innerText","force","isSafari","isChromeIOS","FileReader","reader","onloadend","result","Error","replace","assign","readAsDataURL","toastMessage","message","piniaMessage","__VUE_DEVTOOLS_TOAST__","warn","log","isPinia","checkClipboardAccess","checkNotFocusedError","toLowerCase","includes","actionGlobalCopyState","clipboard","writeText","JSON","stringify","state","value","actionGlobalPasteState","parse","readText","actionGlobalSaveState","fileInput","getFileOpener","accept","openFile","Promise","resolve","reject","onchange","files","file","item","text","oncancel","actionGlobalOpenStateFile","formatDisplay","display","_custom","PINIA_ROOT_LABEL","PINIA_ROOT_ID","formatStoreForInspectorTree","store","id","label","$id","formatStoreForInspectorState","storeNames","Array","from","_s","keys","storeMap","map","storeId","editable","key","getters","filter","get","_getters","reduce","$state","length","getterName","_customProperties","size","customProperties","formatEventData","events","isArray","data","event","push","operations","oldValue","newValue","operation","formatMutationType","direct","patchFunction","patchObject","isTimelineActive","componentStateTypes","MUTATIONS_LAYER_ID","INSPECTOR_ID","assign$1","getStoreType","registerPiniaDevtools","app","logo","packageName","homepage","api","now","addTimelineLayer","color","addInspector","icon","treeFilterPlaceholder","actions","action","tooltip","sendInspectorTree","sendInspectorState","nodeActions","nodeId","_isOptionsAPI","$reset","on","inspectComponent","payload","ctx","proxy","componentInstance","_pStores","piniaStores","values","forEach","instanceData","getInspectorTree","inspectorId","stores","concat","rootNodes","getInspectorState","inspectedStore","editInspectorState","path","has","unshift","editComponentState","startsWith","addStoreToDevtools","settings","logStoreChanges","defaultValue","bind","Date","$onAction","after","onError","args","groupId","runningActionId","addTimelineEvent","layerId","time","subtitle","activeAction","undefined","logType","notifyComponentUpdate","deep","$subscribe","eventData","detached","flush","hotUpdate","_hotUpdate","newStore","info","$dispose","getSettings","patchActionForGrouping","actionNames","storeActions","actionName","_actionId","trackedStore","Proxy","Reflect","apply","arguments","devtoolsPlugin","options","originalHotUpdate","_hmrPayload","createPinia","scope","run","_p","toBeInstalled","install","_a","provide","config","globalProperties","$pinia","plugin","use","_e","Map","isUseStore","fn","newState","oldState","subPatch","targetValue","acceptHMRUpdate","initialUseStore","hot","newModule","_pinia","exportName","useStore","invalidate","existingStore","noop","addSubscription","subscriptions","callback","onCleanup","removeSubscription","idx","indexOf","splice","triggerSubscriptions","slice","mergeReactiveObjects","patchToApply","Set","add","hasOwnProperty","skipHydrateSymbol","skipHydrateMap","WeakMap","skipHydrate","obj","defineProperty","shouldHydrate","isComputed","effect","createOptionsStore","initialState","setup","localState","computedGetters","_r","createSetupStore","$patch","isOptionsStore","optionsForPlugin","active","$subscribeOptions","onTrigger","isListening","debuggerEvents","_hotUpdating","isSyncListening","actionSubscriptions","hotState","activeListener","partialStateOrMutator","subscriptionMutation","myListenerId","then","stop","delete","wrapAction","afterCallbackList","onErrorCallbackList","ret","catch","partialStore","stopWatcher","setupStore","prop","actionValue","stateKey","newStateTarget","oldStateSource","getter","getterValue","nonEnumerable","writable","configurable","enumerable","p","extender","extensions","constructor","hydrate","defineStore","idOrOptions","setupOptions","isSetupStore","currentInstance","_testing","hotId","vm","cache","mapStoreSuffix","setMapStoreSuffix","suffix","mapStores","reduced","mapState","keysOrMapper","storeKey","mapGetters","mapActions","mapWritableState","storeToRefs","refs","PiniaVuePlugin","_Vue","mixin","beforeCreate","$options","_provided","provideCache","v","parent","destroyed"],"sources":["/Users/issuser/Desktop/Project/Web/05_vue3/vue_demo/node_modules/pinia/dist/pinia.mjs"],"sourcesContent":["/*!\n  * pinia v2.0.32\n  * (c) 2023 Eduardo San Martin Morote\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, toRaw, watch, unref, markRaw, effectScope, ref, isVue2, isRef, isReactive, set, getCurrentScope, onScopeDispose, reactive, toRef, del, nextTick, computed, toRefs } from 'vue-demi';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\n/**\r\n * setActivePinia must be called to handle SSR at the top of functions like\r\n * `fetch`, `setup`, `serverPrefetch` and others\r\n */\r\nlet activePinia;\r\n/**\r\n * Sets or unsets the active pinia. Used in SSR and internally when calling\r\n * actions and getters\r\n *\r\n * @param pinia - Pinia instance\r\n */\r\nconst setActivePinia = (pinia) => (activePinia = pinia);\r\n/**\r\n * Get the currently active pinia if there is any.\r\n */\r\nconst getActivePinia = () => (getCurrentInstance() && inject(piniaSymbol)) || activePinia;\r\nconst piniaSymbol = ((process.env.NODE_ENV !== 'production') ? Symbol('pinia') : /* istanbul ignore next */ Symbol());\n\nfunction isPlainObject(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\no) {\r\n    return (o &&\r\n        typeof o === 'object' &&\r\n        Object.prototype.toString.call(o) === '[object Object]' &&\r\n        typeof o.toJSON !== 'function');\r\n}\r\n// type DeepReadonly<T> = { readonly [P in keyof T]: DeepReadonly<T[P]> }\r\n// TODO: can we change these to numbers?\r\n/**\r\n * Possible types for SubscriptionCallback\r\n */\r\nvar MutationType;\r\n(function (MutationType) {\r\n    /**\r\n     * Direct mutation of the state:\r\n     *\r\n     * - `store.name = 'new name'`\r\n     * - `store.$state.name = 'new name'`\r\n     * - `store.list.push('new item')`\r\n     */\r\n    MutationType[\"direct\"] = \"direct\";\r\n    /**\r\n     * Mutated the state with `$patch` and an object\r\n     *\r\n     * - `store.$patch({ name: 'newName' })`\r\n     */\r\n    MutationType[\"patchObject\"] = \"patch object\";\r\n    /**\r\n     * Mutated the state with `$patch` and a function\r\n     *\r\n     * - `store.$patch(state => state.name = 'newName')`\r\n     */\r\n    MutationType[\"patchFunction\"] = \"patch function\";\r\n    // maybe reset? for $state = {} and $reset\r\n})(MutationType || (MutationType = {}));\n\nconst IS_CLIENT = typeof window !== 'undefined';\r\n/**\r\n * Should we add the devtools plugins.\r\n * - only if dev mode or forced through the prod devtools flag\r\n * - not in test\r\n * - only if window exists (could change in the future)\r\n */\r\nconst USE_DEVTOOLS = ((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test') && IS_CLIENT;\n\n/*\r\n * FileSaver.js A saveAs() FileSaver implementation.\r\n *\r\n * Originally by Eli Grey, adapted as an ESM module by Eduardo San Martin\r\n * Morote.\r\n *\r\n * License : MIT\r\n */\r\n// The one and only way of getting global scope in all environments\r\n// https://stackoverflow.com/q/3277182/1008999\r\nconst _global = /*#__PURE__*/ (() => typeof window === 'object' && window.window === window\r\n    ? window\r\n    : typeof self === 'object' && self.self === self\r\n        ? self\r\n        : typeof global === 'object' && global.global === global\r\n            ? global\r\n            : typeof globalThis === 'object'\r\n                ? globalThis\r\n                : { HTMLElement: null })();\r\nfunction bom(blob, { autoBom = false } = {}) {\r\n    // prepend BOM for UTF-8 XML and text/* types (including HTML)\r\n    // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\r\n    if (autoBom &&\r\n        /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\r\n        return new Blob([String.fromCharCode(0xfeff), blob], { type: blob.type });\r\n    }\r\n    return blob;\r\n}\r\nfunction download(url, name, opts) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', url);\r\n    xhr.responseType = 'blob';\r\n    xhr.onload = function () {\r\n        saveAs(xhr.response, name, opts);\r\n    };\r\n    xhr.onerror = function () {\r\n        console.error('could not download file');\r\n    };\r\n    xhr.send();\r\n}\r\nfunction corsEnabled(url) {\r\n    const xhr = new XMLHttpRequest();\r\n    // use sync to avoid popup blocker\r\n    xhr.open('HEAD', url, false);\r\n    try {\r\n        xhr.send();\r\n    }\r\n    catch (e) { }\r\n    return xhr.status >= 200 && xhr.status <= 299;\r\n}\r\n// `a.click()` doesn't work for all browsers (#465)\r\nfunction click(node) {\r\n    try {\r\n        node.dispatchEvent(new MouseEvent('click'));\r\n    }\r\n    catch (e) {\r\n        const evt = document.createEvent('MouseEvents');\r\n        evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\r\n        node.dispatchEvent(evt);\r\n    }\r\n}\r\nconst _navigator = \r\n typeof navigator === 'object' ? navigator : { userAgent: '' };\r\n// Detect WebView inside a native macOS app by ruling out all browsers\r\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\r\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\r\nconst isMacOSWebView = /*#__PURE__*/ (() => /Macintosh/.test(_navigator.userAgent) &&\r\n    /AppleWebKit/.test(_navigator.userAgent) &&\r\n    !/Safari/.test(_navigator.userAgent))();\r\nconst saveAs = !IS_CLIENT\r\n    ? () => { } // noop\r\n    : // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program\r\n        typeof HTMLAnchorElement !== 'undefined' &&\r\n            'download' in HTMLAnchorElement.prototype &&\r\n            !isMacOSWebView\r\n            ? downloadSaveAs\r\n            : // Use msSaveOrOpenBlob as a second approach\r\n                'msSaveOrOpenBlob' in _navigator\r\n                    ? msSaveAs\r\n                    : // Fallback to using FileReader and a popup\r\n                        fileSaverSaveAs;\r\nfunction downloadSaveAs(blob, name = 'download', opts) {\r\n    const a = document.createElement('a');\r\n    a.download = name;\r\n    a.rel = 'noopener'; // tabnabbing\r\n    // TODO: detect chrome extensions & packaged apps\r\n    // a.target = '_blank'\r\n    if (typeof blob === 'string') {\r\n        // Support regular links\r\n        a.href = blob;\r\n        if (a.origin !== location.origin) {\r\n            if (corsEnabled(a.href)) {\r\n                download(blob, name, opts);\r\n            }\r\n            else {\r\n                a.target = '_blank';\r\n                click(a);\r\n            }\r\n        }\r\n        else {\r\n            click(a);\r\n        }\r\n    }\r\n    else {\r\n        // Support blobs\r\n        a.href = URL.createObjectURL(blob);\r\n        setTimeout(function () {\r\n            URL.revokeObjectURL(a.href);\r\n        }, 4e4); // 40s\r\n        setTimeout(function () {\r\n            click(a);\r\n        }, 0);\r\n    }\r\n}\r\nfunction msSaveAs(blob, name = 'download', opts) {\r\n    if (typeof blob === 'string') {\r\n        if (corsEnabled(blob)) {\r\n            download(blob, name, opts);\r\n        }\r\n        else {\r\n            const a = document.createElement('a');\r\n            a.href = blob;\r\n            a.target = '_blank';\r\n            setTimeout(function () {\r\n                click(a);\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        // @ts-ignore: works on windows\r\n        navigator.msSaveOrOpenBlob(bom(blob, opts), name);\r\n    }\r\n}\r\nfunction fileSaverSaveAs(blob, name, opts, popup) {\r\n    // Open a popup immediately do go around popup blocker\r\n    // Mostly only available on user interaction and the fileReader is async so...\r\n    popup = popup || open('', '_blank');\r\n    if (popup) {\r\n        popup.document.title = popup.document.body.innerText = 'downloading...';\r\n    }\r\n    if (typeof blob === 'string')\r\n        return download(blob, name, opts);\r\n    const force = blob.type === 'application/octet-stream';\r\n    const isSafari = /constructor/i.test(String(_global.HTMLElement)) || 'safari' in _global;\r\n    const isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent);\r\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) &&\r\n        typeof FileReader !== 'undefined') {\r\n        // Safari doesn't allow downloading of blob URLs\r\n        const reader = new FileReader();\r\n        reader.onloadend = function () {\r\n            let url = reader.result;\r\n            if (typeof url !== 'string') {\r\n                popup = null;\r\n                throw new Error('Wrong reader.result type');\r\n            }\r\n            url = isChromeIOS\r\n                ? url\r\n                : url.replace(/^data:[^;]*;/, 'data:attachment/file;');\r\n            if (popup) {\r\n                popup.location.href = url;\r\n            }\r\n            else {\r\n                location.assign(url);\r\n            }\r\n            popup = null; // reverse-tabnabbing #460\r\n        };\r\n        reader.readAsDataURL(blob);\r\n    }\r\n    else {\r\n        const url = URL.createObjectURL(blob);\r\n        if (popup)\r\n            popup.location.assign(url);\r\n        else\r\n            location.href = url;\r\n        popup = null; // reverse-tabnabbing #460\r\n        setTimeout(function () {\r\n            URL.revokeObjectURL(url);\r\n        }, 4e4); // 40s\r\n    }\r\n}\n\n/**\r\n * Shows a toast or console.log\r\n *\r\n * @param message - message to log\r\n * @param type - different color of the tooltip\r\n */\r\nfunction toastMessage(message, type) {\r\n    const piniaMessage = 'üçç ' + message;\r\n    if (typeof __VUE_DEVTOOLS_TOAST__ === 'function') {\r\n        __VUE_DEVTOOLS_TOAST__(piniaMessage, type);\r\n    }\r\n    else if (type === 'error') {\r\n        console.error(piniaMessage);\r\n    }\r\n    else if (type === 'warn') {\r\n        console.warn(piniaMessage);\r\n    }\r\n    else {\r\n        console.log(piniaMessage);\r\n    }\r\n}\r\nfunction isPinia(o) {\r\n    return '_a' in o && 'install' in o;\r\n}\n\nfunction checkClipboardAccess() {\r\n    if (!('clipboard' in navigator)) {\r\n        toastMessage(`Your browser doesn't support the Clipboard API`, 'error');\r\n        return true;\r\n    }\r\n}\r\nfunction checkNotFocusedError(error) {\r\n    if (error instanceof Error &&\r\n        error.message.toLowerCase().includes('document is not focused')) {\r\n        toastMessage('You need to activate the \"Emulate a focused page\" setting in the \"Rendering\" panel of devtools.', 'warn');\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nasync function actionGlobalCopyState(pinia) {\r\n    if (checkClipboardAccess())\r\n        return;\r\n    try {\r\n        await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));\r\n        toastMessage('Global state copied to clipboard.');\r\n    }\r\n    catch (error) {\r\n        if (checkNotFocusedError(error))\r\n            return;\r\n        toastMessage(`Failed to serialize the state. Check the console for more details.`, 'error');\r\n        console.error(error);\r\n    }\r\n}\r\nasync function actionGlobalPasteState(pinia) {\r\n    if (checkClipboardAccess())\r\n        return;\r\n    try {\r\n        pinia.state.value = JSON.parse(await navigator.clipboard.readText());\r\n        toastMessage('Global state pasted from clipboard.');\r\n    }\r\n    catch (error) {\r\n        if (checkNotFocusedError(error))\r\n            return;\r\n        toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, 'error');\r\n        console.error(error);\r\n    }\r\n}\r\nasync function actionGlobalSaveState(pinia) {\r\n    try {\r\n        saveAs(new Blob([JSON.stringify(pinia.state.value)], {\r\n            type: 'text/plain;charset=utf-8',\r\n        }), 'pinia-state.json');\r\n    }\r\n    catch (error) {\r\n        toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');\r\n        console.error(error);\r\n    }\r\n}\r\nlet fileInput;\r\nfunction getFileOpener() {\r\n    if (!fileInput) {\r\n        fileInput = document.createElement('input');\r\n        fileInput.type = 'file';\r\n        fileInput.accept = '.json';\r\n    }\r\n    function openFile() {\r\n        return new Promise((resolve, reject) => {\r\n            fileInput.onchange = async () => {\r\n                const files = fileInput.files;\r\n                if (!files)\r\n                    return resolve(null);\r\n                const file = files.item(0);\r\n                if (!file)\r\n                    return resolve(null);\r\n                return resolve({ text: await file.text(), file });\r\n            };\r\n            // @ts-ignore: TODO: changed from 4.3 to 4.4\r\n            fileInput.oncancel = () => resolve(null);\r\n            fileInput.onerror = reject;\r\n            fileInput.click();\r\n        });\r\n    }\r\n    return openFile;\r\n}\r\nasync function actionGlobalOpenStateFile(pinia) {\r\n    try {\r\n        const open = await getFileOpener();\r\n        const result = await open();\r\n        if (!result)\r\n            return;\r\n        const { text, file } = result;\r\n        pinia.state.value = JSON.parse(text);\r\n        toastMessage(`Global state imported from \"${file.name}\".`);\r\n    }\r\n    catch (error) {\r\n        toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');\r\n        console.error(error);\r\n    }\r\n}\n\nfunction formatDisplay(display) {\r\n    return {\r\n        _custom: {\r\n            display,\r\n        },\r\n    };\r\n}\r\nconst PINIA_ROOT_LABEL = 'üçç Pinia (root)';\r\nconst PINIA_ROOT_ID = '_root';\r\nfunction formatStoreForInspectorTree(store) {\r\n    return isPinia(store)\r\n        ? {\r\n            id: PINIA_ROOT_ID,\r\n            label: PINIA_ROOT_LABEL,\r\n        }\r\n        : {\r\n            id: store.$id,\r\n            label: store.$id,\r\n        };\r\n}\r\nfunction formatStoreForInspectorState(store) {\r\n    if (isPinia(store)) {\r\n        const storeNames = Array.from(store._s.keys());\r\n        const storeMap = store._s;\r\n        const state = {\r\n            state: storeNames.map((storeId) => ({\r\n                editable: true,\r\n                key: storeId,\r\n                value: store.state.value[storeId],\r\n            })),\r\n            getters: storeNames\r\n                .filter((id) => storeMap.get(id)._getters)\r\n                .map((id) => {\r\n                const store = storeMap.get(id);\r\n                return {\r\n                    editable: false,\r\n                    key: id,\r\n                    value: store._getters.reduce((getters, key) => {\r\n                        getters[key] = store[key];\r\n                        return getters;\r\n                    }, {}),\r\n                };\r\n            }),\r\n        };\r\n        return state;\r\n    }\r\n    const state = {\r\n        state: Object.keys(store.$state).map((key) => ({\r\n            editable: true,\r\n            key,\r\n            value: store.$state[key],\r\n        })),\r\n    };\r\n    // avoid adding empty getters\r\n    if (store._getters && store._getters.length) {\r\n        state.getters = store._getters.map((getterName) => ({\r\n            editable: false,\r\n            key: getterName,\r\n            value: store[getterName],\r\n        }));\r\n    }\r\n    if (store._customProperties.size) {\r\n        state.customProperties = Array.from(store._customProperties).map((key) => ({\r\n            editable: true,\r\n            key,\r\n            value: store[key],\r\n        }));\r\n    }\r\n    return state;\r\n}\r\nfunction formatEventData(events) {\r\n    if (!events)\r\n        return {};\r\n    if (Array.isArray(events)) {\r\n        // TODO: handle add and delete for arrays and objects\r\n        return events.reduce((data, event) => {\r\n            data.keys.push(event.key);\r\n            data.operations.push(event.type);\r\n            data.oldValue[event.key] = event.oldValue;\r\n            data.newValue[event.key] = event.newValue;\r\n            return data;\r\n        }, {\r\n            oldValue: {},\r\n            keys: [],\r\n            operations: [],\r\n            newValue: {},\r\n        });\r\n    }\r\n    else {\r\n        return {\r\n            operation: formatDisplay(events.type),\r\n            key: formatDisplay(events.key),\r\n            oldValue: events.oldValue,\r\n            newValue: events.newValue,\r\n        };\r\n    }\r\n}\r\nfunction formatMutationType(type) {\r\n    switch (type) {\r\n        case MutationType.direct:\r\n            return 'mutation';\r\n        case MutationType.patchFunction:\r\n            return '$patch';\r\n        case MutationType.patchObject:\r\n            return '$patch';\r\n        default:\r\n            return 'unknown';\r\n    }\r\n}\n\n// timeline can be paused when directly changing the state\r\nlet isTimelineActive = true;\r\nconst componentStateTypes = [];\r\nconst MUTATIONS_LAYER_ID = 'pinia:mutations';\r\nconst INSPECTOR_ID = 'pinia';\r\nconst { assign: assign$1 } = Object;\r\n/**\r\n * Gets the displayed name of a store in devtools\r\n *\r\n * @param id - id of the store\r\n * @returns a formatted string\r\n */\r\nconst getStoreType = (id) => 'üçç ' + id;\r\n/**\r\n * Add the pinia plugin without any store. Allows displaying a Pinia plugin tab\r\n * as soon as it is added to the application.\r\n *\r\n * @param app - Vue application\r\n * @param pinia - pinia instance\r\n */\r\nfunction registerPiniaDevtools(app, pinia) {\r\n    setupDevtoolsPlugin({\r\n        id: 'dev.esm.pinia',\r\n        label: 'Pinia üçç',\r\n        logo: 'https://pinia.vuejs.org/logo.svg',\r\n        packageName: 'pinia',\r\n        homepage: 'https://pinia.vuejs.org',\r\n        componentStateTypes,\r\n        app,\r\n    }, (api) => {\r\n        if (typeof api.now !== 'function') {\r\n            toastMessage('You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.');\r\n        }\r\n        api.addTimelineLayer({\r\n            id: MUTATIONS_LAYER_ID,\r\n            label: `Pinia üçç`,\r\n            color: 0xe5df88,\r\n        });\r\n        api.addInspector({\r\n            id: INSPECTOR_ID,\r\n            label: 'Pinia üçç',\r\n            icon: 'storage',\r\n            treeFilterPlaceholder: 'Search stores',\r\n            actions: [\r\n                {\r\n                    icon: 'content_copy',\r\n                    action: () => {\r\n                        actionGlobalCopyState(pinia);\r\n                    },\r\n                    tooltip: 'Serialize and copy the state',\r\n                },\r\n                {\r\n                    icon: 'content_paste',\r\n                    action: async () => {\r\n                        await actionGlobalPasteState(pinia);\r\n                        api.sendInspectorTree(INSPECTOR_ID);\r\n                        api.sendInspectorState(INSPECTOR_ID);\r\n                    },\r\n                    tooltip: 'Replace the state with the content of your clipboard',\r\n                },\r\n                {\r\n                    icon: 'save',\r\n                    action: () => {\r\n                        actionGlobalSaveState(pinia);\r\n                    },\r\n                    tooltip: 'Save the state as a JSON file',\r\n                },\r\n                {\r\n                    icon: 'folder_open',\r\n                    action: async () => {\r\n                        await actionGlobalOpenStateFile(pinia);\r\n                        api.sendInspectorTree(INSPECTOR_ID);\r\n                        api.sendInspectorState(INSPECTOR_ID);\r\n                    },\r\n                    tooltip: 'Import the state from a JSON file',\r\n                },\r\n            ],\r\n            nodeActions: [\r\n                {\r\n                    icon: 'restore',\r\n                    tooltip: 'Reset the state (option store only)',\r\n                    action: (nodeId) => {\r\n                        const store = pinia._s.get(nodeId);\r\n                        if (!store) {\r\n                            toastMessage(`Cannot reset \"${nodeId}\" store because it wasn't found.`, 'warn');\r\n                        }\r\n                        else if (!store._isOptionsAPI) {\r\n                            toastMessage(`Cannot reset \"${nodeId}\" store because it's a setup store.`, 'warn');\r\n                        }\r\n                        else {\r\n                            store.$reset();\r\n                            toastMessage(`Store \"${nodeId}\" reset.`);\r\n                        }\r\n                    },\r\n                },\r\n            ],\r\n        });\r\n        api.on.inspectComponent((payload, ctx) => {\r\n            const proxy = (payload.componentInstance &&\r\n                payload.componentInstance.proxy);\r\n            if (proxy && proxy._pStores) {\r\n                const piniaStores = payload.componentInstance.proxy._pStores;\r\n                Object.values(piniaStores).forEach((store) => {\r\n                    payload.instanceData.state.push({\r\n                        type: getStoreType(store.$id),\r\n                        key: 'state',\r\n                        editable: true,\r\n                        value: store._isOptionsAPI\r\n                            ? {\r\n                                _custom: {\r\n                                    value: toRaw(store.$state),\r\n                                    actions: [\r\n                                        {\r\n                                            icon: 'restore',\r\n                                            tooltip: 'Reset the state of this store',\r\n                                            action: () => store.$reset(),\r\n                                        },\r\n                                    ],\r\n                                },\r\n                            }\r\n                            : // NOTE: workaround to unwrap transferred refs\r\n                                Object.keys(store.$state).reduce((state, key) => {\r\n                                    state[key] = store.$state[key];\r\n                                    return state;\r\n                                }, {}),\r\n                    });\r\n                    if (store._getters && store._getters.length) {\r\n                        payload.instanceData.state.push({\r\n                            type: getStoreType(store.$id),\r\n                            key: 'getters',\r\n                            editable: false,\r\n                            value: store._getters.reduce((getters, key) => {\r\n                                try {\r\n                                    getters[key] = store[key];\r\n                                }\r\n                                catch (error) {\r\n                                    // @ts-expect-error: we just want to show it in devtools\r\n                                    getters[key] = error;\r\n                                }\r\n                                return getters;\r\n                            }, {}),\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        api.on.getInspectorTree((payload) => {\r\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\r\n                let stores = [pinia];\r\n                stores = stores.concat(Array.from(pinia._s.values()));\r\n                payload.rootNodes = (payload.filter\r\n                    ? stores.filter((store) => '$id' in store\r\n                        ? store.$id\r\n                            .toLowerCase()\r\n                            .includes(payload.filter.toLowerCase())\r\n                        : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase()))\r\n                    : stores).map(formatStoreForInspectorTree);\r\n            }\r\n        });\r\n        api.on.getInspectorState((payload) => {\r\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\r\n                const inspectedStore = payload.nodeId === PINIA_ROOT_ID\r\n                    ? pinia\r\n                    : pinia._s.get(payload.nodeId);\r\n                if (!inspectedStore) {\r\n                    // this could be the selected store restored for a different project\r\n                    // so it's better not to say anything here\r\n                    return;\r\n                }\r\n                if (inspectedStore) {\r\n                    payload.state = formatStoreForInspectorState(inspectedStore);\r\n                }\r\n            }\r\n        });\r\n        api.on.editInspectorState((payload, ctx) => {\r\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\r\n                const inspectedStore = payload.nodeId === PINIA_ROOT_ID\r\n                    ? pinia\r\n                    : pinia._s.get(payload.nodeId);\r\n                if (!inspectedStore) {\r\n                    return toastMessage(`store \"${payload.nodeId}\" not found`, 'error');\r\n                }\r\n                const { path } = payload;\r\n                if (!isPinia(inspectedStore)) {\r\n                    // access only the state\r\n                    if (path.length !== 1 ||\r\n                        !inspectedStore._customProperties.has(path[0]) ||\r\n                        path[0] in inspectedStore.$state) {\r\n                        path.unshift('$state');\r\n                    }\r\n                }\r\n                else {\r\n                    // Root access, we can omit the `.value` because the devtools API does it for us\r\n                    path.unshift('state');\r\n                }\r\n                isTimelineActive = false;\r\n                payload.set(inspectedStore, path, payload.state.value);\r\n                isTimelineActive = true;\r\n            }\r\n        });\r\n        api.on.editComponentState((payload) => {\r\n            if (payload.type.startsWith('üçç')) {\r\n                const storeId = payload.type.replace(/^üçç\\s*/, '');\r\n                const store = pinia._s.get(storeId);\r\n                if (!store) {\r\n                    return toastMessage(`store \"${storeId}\" not found`, 'error');\r\n                }\r\n                const { path } = payload;\r\n                if (path[0] !== 'state') {\r\n                    return toastMessage(`Invalid path for store \"${storeId}\":\\n${path}\\nOnly state can be modified.`);\r\n                }\r\n                // rewrite the first entry to be able to directly set the state as\r\n                // well as any other path\r\n                path[0] = '$state';\r\n                isTimelineActive = false;\r\n                payload.set(store, path, payload.state.value);\r\n                isTimelineActive = true;\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction addStoreToDevtools(app, store) {\r\n    if (!componentStateTypes.includes(getStoreType(store.$id))) {\r\n        componentStateTypes.push(getStoreType(store.$id));\r\n    }\r\n    setupDevtoolsPlugin({\r\n        id: 'dev.esm.pinia',\r\n        label: 'Pinia üçç',\r\n        logo: 'https://pinia.vuejs.org/logo.svg',\r\n        packageName: 'pinia',\r\n        homepage: 'https://pinia.vuejs.org',\r\n        componentStateTypes,\r\n        app,\r\n        settings: {\r\n            logStoreChanges: {\r\n                label: 'Notify about new/deleted stores',\r\n                type: 'boolean',\r\n                defaultValue: true,\r\n            },\r\n            // useEmojis: {\r\n            //   label: 'Use emojis in messages ‚ö°Ô∏è',\r\n            //   type: 'boolean',\r\n            //   defaultValue: true,\r\n            // },\r\n        },\r\n    }, (api) => {\r\n        // gracefully handle errors\r\n        const now = typeof api.now === 'function' ? api.now.bind(api) : Date.now;\r\n        store.$onAction(({ after, onError, name, args }) => {\r\n            const groupId = runningActionId++;\r\n            api.addTimelineEvent({\r\n                layerId: MUTATIONS_LAYER_ID,\r\n                event: {\r\n                    time: now(),\r\n                    title: 'üõ´ ' + name,\r\n                    subtitle: 'start',\r\n                    data: {\r\n                        store: formatDisplay(store.$id),\r\n                        action: formatDisplay(name),\r\n                        args,\r\n                    },\r\n                    groupId,\r\n                },\r\n            });\r\n            after((result) => {\r\n                activeAction = undefined;\r\n                api.addTimelineEvent({\r\n                    layerId: MUTATIONS_LAYER_ID,\r\n                    event: {\r\n                        time: now(),\r\n                        title: 'üõ¨ ' + name,\r\n                        subtitle: 'end',\r\n                        data: {\r\n                            store: formatDisplay(store.$id),\r\n                            action: formatDisplay(name),\r\n                            args,\r\n                            result,\r\n                        },\r\n                        groupId,\r\n                    },\r\n                });\r\n            });\r\n            onError((error) => {\r\n                activeAction = undefined;\r\n                api.addTimelineEvent({\r\n                    layerId: MUTATIONS_LAYER_ID,\r\n                    event: {\r\n                        time: now(),\r\n                        logType: 'error',\r\n                        title: 'üí• ' + name,\r\n                        subtitle: 'end',\r\n                        data: {\r\n                            store: formatDisplay(store.$id),\r\n                            action: formatDisplay(name),\r\n                            args,\r\n                            error,\r\n                        },\r\n                        groupId,\r\n                    },\r\n                });\r\n            });\r\n        }, true);\r\n        store._customProperties.forEach((name) => {\r\n            watch(() => unref(store[name]), (newValue, oldValue) => {\r\n                api.notifyComponentUpdate();\r\n                api.sendInspectorState(INSPECTOR_ID);\r\n                if (isTimelineActive) {\r\n                    api.addTimelineEvent({\r\n                        layerId: MUTATIONS_LAYER_ID,\r\n                        event: {\r\n                            time: now(),\r\n                            title: 'Change',\r\n                            subtitle: name,\r\n                            data: {\r\n                                newValue,\r\n                                oldValue,\r\n                            },\r\n                            groupId: activeAction,\r\n                        },\r\n                    });\r\n                }\r\n            }, { deep: true });\r\n        });\r\n        store.$subscribe(({ events, type }, state) => {\r\n            api.notifyComponentUpdate();\r\n            api.sendInspectorState(INSPECTOR_ID);\r\n            if (!isTimelineActive)\r\n                return;\r\n            // rootStore.state[store.id] = state\r\n            const eventData = {\r\n                time: now(),\r\n                title: formatMutationType(type),\r\n                data: assign$1({ store: formatDisplay(store.$id) }, formatEventData(events)),\r\n                groupId: activeAction,\r\n            };\r\n            // reset for the next mutation\r\n            activeAction = undefined;\r\n            if (type === MutationType.patchFunction) {\r\n                eventData.subtitle = '‚§µÔ∏è';\r\n            }\r\n            else if (type === MutationType.patchObject) {\r\n                eventData.subtitle = 'üß©';\r\n            }\r\n            else if (events && !Array.isArray(events)) {\r\n                eventData.subtitle = events.type;\r\n            }\r\n            if (events) {\r\n                eventData.data['rawEvent(s)'] = {\r\n                    _custom: {\r\n                        display: 'DebuggerEvent',\r\n                        type: 'object',\r\n                        tooltip: 'raw DebuggerEvent[]',\r\n                        value: events,\r\n                    },\r\n                };\r\n            }\r\n            api.addTimelineEvent({\r\n                layerId: MUTATIONS_LAYER_ID,\r\n                event: eventData,\r\n            });\r\n        }, { detached: true, flush: 'sync' });\r\n        const hotUpdate = store._hotUpdate;\r\n        store._hotUpdate = markRaw((newStore) => {\r\n            hotUpdate(newStore);\r\n            api.addTimelineEvent({\r\n                layerId: MUTATIONS_LAYER_ID,\r\n                event: {\r\n                    time: now(),\r\n                    title: 'üî• ' + store.$id,\r\n                    subtitle: 'HMR update',\r\n                    data: {\r\n                        store: formatDisplay(store.$id),\r\n                        info: formatDisplay(`HMR update`),\r\n                    },\r\n                },\r\n            });\r\n            // update the devtools too\r\n            api.notifyComponentUpdate();\r\n            api.sendInspectorTree(INSPECTOR_ID);\r\n            api.sendInspectorState(INSPECTOR_ID);\r\n        });\r\n        const { $dispose } = store;\r\n        store.$dispose = () => {\r\n            $dispose();\r\n            api.notifyComponentUpdate();\r\n            api.sendInspectorTree(INSPECTOR_ID);\r\n            api.sendInspectorState(INSPECTOR_ID);\r\n            api.getSettings().logStoreChanges &&\r\n                toastMessage(`Disposed \"${store.$id}\" store üóë`);\r\n        };\r\n        // trigger an update so it can display new registered stores\r\n        api.notifyComponentUpdate();\r\n        api.sendInspectorTree(INSPECTOR_ID);\r\n        api.sendInspectorState(INSPECTOR_ID);\r\n        api.getSettings().logStoreChanges &&\r\n            toastMessage(`\"${store.$id}\" store installed üÜï`);\r\n    });\r\n}\r\nlet runningActionId = 0;\r\nlet activeAction;\r\n/**\r\n * Patches a store to enable action grouping in devtools by wrapping the store with a Proxy that is passed as the\r\n * context of all actions, allowing us to set `runningAction` on each access and effectively associating any state\r\n * mutation to the action.\r\n *\r\n * @param store - store to patch\r\n * @param actionNames - list of actionst to patch\r\n */\r\nfunction patchActionForGrouping(store, actionNames) {\r\n    // original actions of the store as they are given by pinia. We are going to override them\r\n    const actions = actionNames.reduce((storeActions, actionName) => {\r\n        // use toRaw to avoid tracking #541\r\n        storeActions[actionName] = toRaw(store)[actionName];\r\n        return storeActions;\r\n    }, {});\r\n    for (const actionName in actions) {\r\n        store[actionName] = function () {\r\n            // setActivePinia(store._p)\r\n            // the running action id is incremented in a before action hook\r\n            const _actionId = runningActionId;\r\n            const trackedStore = new Proxy(store, {\r\n                get(...args) {\r\n                    activeAction = _actionId;\r\n                    return Reflect.get(...args);\r\n                },\r\n                set(...args) {\r\n                    activeAction = _actionId;\r\n                    return Reflect.set(...args);\r\n                },\r\n            });\r\n            return actions[actionName].apply(trackedStore, arguments);\r\n        };\r\n    }\r\n}\r\n/**\r\n * pinia.use(devtoolsPlugin)\r\n */\r\nfunction devtoolsPlugin({ app, store, options }) {\r\n    // HMR module\r\n    if (store.$id.startsWith('__hot:')) {\r\n        return;\r\n    }\r\n    // detect option api vs setup api\r\n    if (options.state) {\r\n        store._isOptionsAPI = true;\r\n    }\r\n    // only wrap actions in option-defined stores as this technique relies on\r\n    // wrapping the context of the action with a proxy\r\n    if (typeof options.state === 'function') {\r\n        patchActionForGrouping(\r\n        // @ts-expect-error: can cast the store...\r\n        store, Object.keys(options.actions));\r\n        const originalHotUpdate = store._hotUpdate;\r\n        // Upgrade the HMR to also update the new actions\r\n        toRaw(store)._hotUpdate = function (newStore) {\r\n            originalHotUpdate.apply(this, arguments);\r\n            patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions));\r\n        };\r\n    }\r\n    addStoreToDevtools(app, \r\n    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?\r\n    store);\r\n}\n\n/**\r\n * Creates a Pinia instance to be used by the application\r\n */\r\nfunction createPinia() {\r\n    const scope = effectScope(true);\r\n    // NOTE: here we could check the window object for a state and directly set it\r\n    // if there is anything like it with Vue 3 SSR\r\n    const state = scope.run(() => ref({}));\r\n    let _p = [];\r\n    // plugins added before calling app.use(pinia)\r\n    let toBeInstalled = [];\r\n    const pinia = markRaw({\r\n        install(app) {\r\n            // this allows calling useStore() outside of a component setup after\r\n            // installing pinia's plugin\r\n            setActivePinia(pinia);\r\n            if (!isVue2) {\r\n                pinia._a = app;\r\n                app.provide(piniaSymbol, pinia);\r\n                app.config.globalProperties.$pinia = pinia;\r\n                /* istanbul ignore else */\r\n                if (USE_DEVTOOLS) {\r\n                    registerPiniaDevtools(app, pinia);\r\n                }\r\n                toBeInstalled.forEach((plugin) => _p.push(plugin));\r\n                toBeInstalled = [];\r\n            }\r\n        },\r\n        use(plugin) {\r\n            if (!this._a && !isVue2) {\r\n                toBeInstalled.push(plugin);\r\n            }\r\n            else {\r\n                _p.push(plugin);\r\n            }\r\n            return this;\r\n        },\r\n        _p,\r\n        // it's actually undefined here\r\n        // @ts-expect-error\r\n        _a: null,\r\n        _e: scope,\r\n        _s: new Map(),\r\n        state,\r\n    });\r\n    // pinia devtools rely on dev only features so they cannot be forced unless\r\n    // the dev build of Vue is used. Avoid old browsers like IE11.\r\n    if (USE_DEVTOOLS && typeof Proxy !== 'undefined') {\r\n        pinia.use(devtoolsPlugin);\r\n    }\r\n    return pinia;\r\n}\n\n/**\r\n * Checks if a function is a `StoreDefinition`.\r\n *\r\n * @param fn - object to test\r\n * @returns true if `fn` is a StoreDefinition\r\n */\r\nconst isUseStore = (fn) => {\r\n    return typeof fn === 'function' && typeof fn.$id === 'string';\r\n};\r\n/**\r\n * Mutates in place `newState` with `oldState` to _hot update_ it. It will\r\n * remove any key not existing in `newState` and recursively merge plain\r\n * objects.\r\n *\r\n * @param newState - new state object to be patched\r\n * @param oldState - old state that should be used to patch newState\r\n * @returns - newState\r\n */\r\nfunction patchObject(newState, oldState) {\r\n    // no need to go through symbols because they cannot be serialized anyway\r\n    for (const key in oldState) {\r\n        const subPatch = oldState[key];\r\n        // skip the whole sub tree\r\n        if (!(key in newState)) {\r\n            continue;\r\n        }\r\n        const targetValue = newState[key];\r\n        if (isPlainObject(targetValue) &&\r\n            isPlainObject(subPatch) &&\r\n            !isRef(subPatch) &&\r\n            !isReactive(subPatch)) {\r\n            newState[key] = patchObject(targetValue, subPatch);\r\n        }\r\n        else {\r\n            // objects are either a bit more complex (e.g. refs) or primitives, so we\r\n            // just set the whole thing\r\n            if (isVue2) {\r\n                set(newState, key, subPatch);\r\n            }\r\n            else {\r\n                newState[key] = subPatch;\r\n            }\r\n        }\r\n    }\r\n    return newState;\r\n}\r\n/**\r\n * Creates an _accept_ function to pass to `import.meta.hot` in Vite applications.\r\n *\r\n * @example\r\n * ```js\r\n * const useUser = defineStore(...)\r\n * if (import.meta.hot) {\r\n *   import.meta.hot.accept(acceptHMRUpdate(useUser, import.meta.hot))\r\n * }\r\n * ```\r\n *\r\n * @param initialUseStore - return of the defineStore to hot update\r\n * @param hot - `import.meta.hot`\r\n */\r\nfunction acceptHMRUpdate(initialUseStore, hot) {\r\n    // strip as much as possible from iife.prod\r\n    if (!(process.env.NODE_ENV !== 'production')) {\r\n        return () => { };\r\n    }\r\n    return (newModule) => {\r\n        const pinia = hot.data.pinia || initialUseStore._pinia;\r\n        if (!pinia) {\r\n            // this store is still not used\r\n            return;\r\n        }\r\n        // preserve the pinia instance across loads\r\n        hot.data.pinia = pinia;\r\n        // console.log('got data', newStore)\r\n        for (const exportName in newModule) {\r\n            const useStore = newModule[exportName];\r\n            // console.log('checking for', exportName)\r\n            if (isUseStore(useStore) && pinia._s.has(useStore.$id)) {\r\n                // console.log('Accepting update for', useStore.$id)\r\n                const id = useStore.$id;\r\n                if (id !== initialUseStore.$id) {\r\n                    console.warn(`The id of the store changed from \"${initialUseStore.$id}\" to \"${id}\". Reloading.`);\r\n                    // return import.meta.hot.invalidate()\r\n                    return hot.invalidate();\r\n                }\r\n                const existingStore = pinia._s.get(id);\r\n                if (!existingStore) {\r\n                    console.log(`[Pinia]: skipping hmr because store doesn't exist yet`);\r\n                    return;\r\n                }\r\n                useStore(pinia, existingStore);\r\n            }\r\n        }\r\n    };\r\n}\n\nconst noop = () => { };\r\nfunction addSubscription(subscriptions, callback, detached, onCleanup = noop) {\r\n    subscriptions.push(callback);\r\n    const removeSubscription = () => {\r\n        const idx = subscriptions.indexOf(callback);\r\n        if (idx > -1) {\r\n            subscriptions.splice(idx, 1);\r\n            onCleanup();\r\n        }\r\n    };\r\n    if (!detached && getCurrentScope()) {\r\n        onScopeDispose(removeSubscription);\r\n    }\r\n    return removeSubscription;\r\n}\r\nfunction triggerSubscriptions(subscriptions, ...args) {\r\n    subscriptions.slice().forEach((callback) => {\r\n        callback(...args);\r\n    });\r\n}\n\nfunction mergeReactiveObjects(target, patchToApply) {\r\n    // Handle Map instances\r\n    if (target instanceof Map && patchToApply instanceof Map) {\r\n        patchToApply.forEach((value, key) => target.set(key, value));\r\n    }\r\n    // Handle Set instances\r\n    if (target instanceof Set && patchToApply instanceof Set) {\r\n        patchToApply.forEach(target.add, target);\r\n    }\r\n    // no need to go through symbols because they cannot be serialized anyway\r\n    for (const key in patchToApply) {\r\n        if (!patchToApply.hasOwnProperty(key))\r\n            continue;\r\n        const subPatch = patchToApply[key];\r\n        const targetValue = target[key];\r\n        if (isPlainObject(targetValue) &&\r\n            isPlainObject(subPatch) &&\r\n            target.hasOwnProperty(key) &&\r\n            !isRef(subPatch) &&\r\n            !isReactive(subPatch)) {\r\n            // NOTE: here I wanted to warn about inconsistent types but it's not possible because in setup stores one might\r\n            // start the value of a property as a certain type e.g. a Map, and then for some reason, during SSR, change that\r\n            // to `undefined`. When trying to hydrate, we want to override the Map with `undefined`.\r\n            target[key] = mergeReactiveObjects(targetValue, subPatch);\r\n        }\r\n        else {\r\n            // @ts-expect-error: subPatch is a valid value\r\n            target[key] = subPatch;\r\n        }\r\n    }\r\n    return target;\r\n}\r\nconst skipHydrateSymbol = (process.env.NODE_ENV !== 'production')\r\n    ? Symbol('pinia:skipHydration')\r\n    : /* istanbul ignore next */ Symbol();\r\nconst skipHydrateMap = /*#__PURE__*/ new WeakMap();\r\n/**\r\n * Tells Pinia to skip the hydration process of a given object. This is useful in setup stores (only) when you return a\r\n * stateful object in the store but it isn't really state. e.g. returning a router instance in a setup store.\r\n *\r\n * @param obj - target object\r\n * @returns obj\r\n */\r\nfunction skipHydrate(obj) {\r\n    return isVue2\r\n        ? // in @vue/composition-api, the refs are sealed so defineProperty doesn't work...\r\n            /* istanbul ignore next */ skipHydrateMap.set(obj, 1) && obj\r\n        : Object.defineProperty(obj, skipHydrateSymbol, {});\r\n}\r\n/**\r\n * Returns whether a value should be hydrated\r\n *\r\n * @param obj - target variable\r\n * @returns true if `obj` should be hydrated\r\n */\r\nfunction shouldHydrate(obj) {\r\n    return isVue2\r\n        ? /* istanbul ignore next */ !skipHydrateMap.has(obj)\r\n        : !isPlainObject(obj) || !obj.hasOwnProperty(skipHydrateSymbol);\r\n}\r\nconst { assign } = Object;\r\nfunction isComputed(o) {\r\n    return !!(isRef(o) && o.effect);\r\n}\r\nfunction createOptionsStore(id, options, pinia, hot) {\r\n    const { state, actions, getters } = options;\r\n    const initialState = pinia.state.value[id];\r\n    let store;\r\n    function setup() {\r\n        if (!initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\r\n            /* istanbul ignore if */\r\n            if (isVue2) {\r\n                set(pinia.state.value, id, state ? state() : {});\r\n            }\r\n            else {\r\n                pinia.state.value[id] = state ? state() : {};\r\n            }\r\n        }\r\n        // avoid creating a state in pinia.state.value\r\n        const localState = (process.env.NODE_ENV !== 'production') && hot\r\n            ? // use ref() to unwrap refs inside state TODO: check if this is still necessary\r\n                toRefs(ref(state ? state() : {}).value)\r\n            : toRefs(pinia.state.value[id]);\r\n        return assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {\r\n            if ((process.env.NODE_ENV !== 'production') && name in localState) {\r\n                console.warn(`[üçç]: A getter cannot have the same name as another state property. Rename one of them. Found with \"${name}\" in store \"${id}\".`);\r\n            }\r\n            computedGetters[name] = markRaw(computed(() => {\r\n                setActivePinia(pinia);\r\n                // it was created just before\r\n                const store = pinia._s.get(id);\r\n                // allow cross using stores\r\n                /* istanbul ignore next */\r\n                if (isVue2 && !store._r)\r\n                    return;\r\n                // @ts-expect-error\r\n                // return getters![name].call(context, context)\r\n                // TODO: avoid reading the getter while assigning with a global variable\r\n                return getters[name].call(store, store);\r\n            }));\r\n            return computedGetters;\r\n        }, {}));\r\n    }\r\n    store = createSetupStore(id, setup, options, pinia, hot, true);\r\n    store.$reset = function $reset() {\r\n        const newState = state ? state() : {};\r\n        // we use a patch to group all changes into one single subscription\r\n        this.$patch(($state) => {\r\n            assign($state, newState);\r\n        });\r\n    };\r\n    return store;\r\n}\r\nfunction createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {\r\n    let scope;\r\n    const optionsForPlugin = assign({ actions: {} }, options);\r\n    /* istanbul ignore if */\r\n    if ((process.env.NODE_ENV !== 'production') && !pinia._e.active) {\r\n        throw new Error('Pinia destroyed');\r\n    }\r\n    // watcher options for $subscribe\r\n    const $subscribeOptions = {\r\n        deep: true,\r\n        // flush: 'post',\r\n    };\r\n    /* istanbul ignore else */\r\n    if ((process.env.NODE_ENV !== 'production') && !isVue2) {\r\n        $subscribeOptions.onTrigger = (event) => {\r\n            /* istanbul ignore else */\r\n            if (isListening) {\r\n                debuggerEvents = event;\r\n                // avoid triggering this while the store is being built and the state is being set in pinia\r\n            }\r\n            else if (isListening == false && !store._hotUpdating) {\r\n                // let patch send all the events together later\r\n                /* istanbul ignore else */\r\n                if (Array.isArray(debuggerEvents)) {\r\n                    debuggerEvents.push(event);\r\n                }\r\n                else {\r\n                    console.error('üçç debuggerEvents should be an array. This is most likely an internal Pinia bug.');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    // internal state\r\n    let isListening; // set to true at the end\r\n    let isSyncListening; // set to true at the end\r\n    let subscriptions = markRaw([]);\r\n    let actionSubscriptions = markRaw([]);\r\n    let debuggerEvents;\r\n    const initialState = pinia.state.value[$id];\r\n    // avoid setting the state for option stores if it is set\r\n    // by the setup\r\n    if (!isOptionsStore && !initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\r\n        /* istanbul ignore if */\r\n        if (isVue2) {\r\n            set(pinia.state.value, $id, {});\r\n        }\r\n        else {\r\n            pinia.state.value[$id] = {};\r\n        }\r\n    }\r\n    const hotState = ref({});\r\n    // avoid triggering too many listeners\r\n    // https://github.com/vuejs/pinia/issues/1129\r\n    let activeListener;\r\n    function $patch(partialStateOrMutator) {\r\n        let subscriptionMutation;\r\n        isListening = isSyncListening = false;\r\n        // reset the debugger events since patches are sync\r\n        /* istanbul ignore else */\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            debuggerEvents = [];\r\n        }\r\n        if (typeof partialStateOrMutator === 'function') {\r\n            partialStateOrMutator(pinia.state.value[$id]);\r\n            subscriptionMutation = {\r\n                type: MutationType.patchFunction,\r\n                storeId: $id,\r\n                events: debuggerEvents,\r\n            };\r\n        }\r\n        else {\r\n            mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);\r\n            subscriptionMutation = {\r\n                type: MutationType.patchObject,\r\n                payload: partialStateOrMutator,\r\n                storeId: $id,\r\n                events: debuggerEvents,\r\n            };\r\n        }\r\n        const myListenerId = (activeListener = Symbol());\r\n        nextTick().then(() => {\r\n            if (activeListener === myListenerId) {\r\n                isListening = true;\r\n            }\r\n        });\r\n        isSyncListening = true;\r\n        // because we paused the watcher, we need to manually call the subscriptions\r\n        triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);\r\n    }\r\n    /* istanbul ignore next */\r\n    const $reset = (process.env.NODE_ENV !== 'production')\r\n        ? () => {\r\n            throw new Error(`üçç: Store \"${$id}\" is built using the setup syntax and does not implement $reset().`);\r\n        }\r\n        : noop;\r\n    function $dispose() {\r\n        scope.stop();\r\n        subscriptions = [];\r\n        actionSubscriptions = [];\r\n        pinia._s.delete($id);\r\n    }\r\n    /**\r\n     * Wraps an action to handle subscriptions.\r\n     *\r\n     * @param name - name of the action\r\n     * @param action - action to wrap\r\n     * @returns a wrapped action to handle subscriptions\r\n     */\r\n    function wrapAction(name, action) {\r\n        return function () {\r\n            setActivePinia(pinia);\r\n            const args = Array.from(arguments);\r\n            const afterCallbackList = [];\r\n            const onErrorCallbackList = [];\r\n            function after(callback) {\r\n                afterCallbackList.push(callback);\r\n            }\r\n            function onError(callback) {\r\n                onErrorCallbackList.push(callback);\r\n            }\r\n            // @ts-expect-error\r\n            triggerSubscriptions(actionSubscriptions, {\r\n                args,\r\n                name,\r\n                store,\r\n                after,\r\n                onError,\r\n            });\r\n            let ret;\r\n            try {\r\n                ret = action.apply(this && this.$id === $id ? this : store, args);\r\n                // handle sync errors\r\n            }\r\n            catch (error) {\r\n                triggerSubscriptions(onErrorCallbackList, error);\r\n                throw error;\r\n            }\r\n            if (ret instanceof Promise) {\r\n                return ret\r\n                    .then((value) => {\r\n                    triggerSubscriptions(afterCallbackList, value);\r\n                    return value;\r\n                })\r\n                    .catch((error) => {\r\n                    triggerSubscriptions(onErrorCallbackList, error);\r\n                    return Promise.reject(error);\r\n                });\r\n            }\r\n            // trigger after callbacks\r\n            triggerSubscriptions(afterCallbackList, ret);\r\n            return ret;\r\n        };\r\n    }\r\n    const _hmrPayload = /*#__PURE__*/ markRaw({\r\n        actions: {},\r\n        getters: {},\r\n        state: [],\r\n        hotState,\r\n    });\r\n    const partialStore = {\r\n        _p: pinia,\r\n        // _s: scope,\r\n        $id,\r\n        $onAction: addSubscription.bind(null, actionSubscriptions),\r\n        $patch,\r\n        $reset,\r\n        $subscribe(callback, options = {}) {\r\n            const removeSubscription = addSubscription(subscriptions, callback, options.detached, () => stopWatcher());\r\n            const stopWatcher = scope.run(() => watch(() => pinia.state.value[$id], (state) => {\r\n                if (options.flush === 'sync' ? isSyncListening : isListening) {\r\n                    callback({\r\n                        storeId: $id,\r\n                        type: MutationType.direct,\r\n                        events: debuggerEvents,\r\n                    }, state);\r\n                }\r\n            }, assign({}, $subscribeOptions, options)));\r\n            return removeSubscription;\r\n        },\r\n        $dispose,\r\n    };\r\n    /* istanbul ignore if */\r\n    if (isVue2) {\r\n        // start as non ready\r\n        partialStore._r = false;\r\n    }\r\n    const store = reactive((process.env.NODE_ENV !== 'production') || USE_DEVTOOLS\r\n        ? assign({\r\n            _hmrPayload,\r\n            _customProperties: markRaw(new Set()), // devtools custom properties\r\n        }, partialStore\r\n        // must be added later\r\n        // setupStore\r\n        )\r\n        : partialStore);\r\n    // store the partial store now so the setup of stores can instantiate each other before they are finished without\r\n    // creating infinite loops.\r\n    pinia._s.set($id, store);\r\n    // TODO: idea create skipSerialize that marks properties as non serializable and they are skipped\r\n    const setupStore = pinia._e.run(() => {\r\n        scope = effectScope();\r\n        return scope.run(() => setup());\r\n    });\r\n    // overwrite existing actions to support $onAction\r\n    for (const key in setupStore) {\r\n        const prop = setupStore[key];\r\n        if ((isRef(prop) && !isComputed(prop)) || isReactive(prop)) {\r\n            // mark it as a piece of state to be serialized\r\n            if ((process.env.NODE_ENV !== 'production') && hot) {\r\n                set(hotState.value, key, toRef(setupStore, key));\r\n                // createOptionStore directly sets the state in pinia.state.value so we\r\n                // can just skip that\r\n            }\r\n            else if (!isOptionsStore) {\r\n                // in setup stores we must hydrate the state and sync pinia state tree with the refs the user just created\r\n                if (initialState && shouldHydrate(prop)) {\r\n                    if (isRef(prop)) {\r\n                        prop.value = initialState[key];\r\n                    }\r\n                    else {\r\n                        // probably a reactive object, lets recursively assign\r\n                        // @ts-expect-error: prop is unknown\r\n                        mergeReactiveObjects(prop, initialState[key]);\r\n                    }\r\n                }\r\n                // transfer the ref to the pinia state to keep everything in sync\r\n                /* istanbul ignore if */\r\n                if (isVue2) {\r\n                    set(pinia.state.value[$id], key, prop);\r\n                }\r\n                else {\r\n                    pinia.state.value[$id][key] = prop;\r\n                }\r\n            }\r\n            /* istanbul ignore else */\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                _hmrPayload.state.push(key);\r\n            }\r\n            // action\r\n        }\r\n        else if (typeof prop === 'function') {\r\n            // @ts-expect-error: we are overriding the function we avoid wrapping if\r\n            const actionValue = (process.env.NODE_ENV !== 'production') && hot ? prop : wrapAction(key, prop);\r\n            // this a hot module replacement store because the hotUpdate method needs\r\n            // to do it with the right context\r\n            /* istanbul ignore if */\r\n            if (isVue2) {\r\n                set(setupStore, key, actionValue);\r\n            }\r\n            else {\r\n                // @ts-expect-error\r\n                setupStore[key] = actionValue;\r\n            }\r\n            /* istanbul ignore else */\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                _hmrPayload.actions[key] = prop;\r\n            }\r\n            // list actions so they can be used in plugins\r\n            // @ts-expect-error\r\n            optionsForPlugin.actions[key] = prop;\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            // add getters for devtools\r\n            if (isComputed(prop)) {\r\n                _hmrPayload.getters[key] = isOptionsStore\r\n                    ? // @ts-expect-error\r\n                        options.getters[key]\r\n                    : prop;\r\n                if (IS_CLIENT) {\r\n                    const getters = setupStore._getters ||\r\n                        // @ts-expect-error: same\r\n                        (setupStore._getters = markRaw([]));\r\n                    getters.push(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // add the state, getters, and action properties\r\n    /* istanbul ignore if */\r\n    if (isVue2) {\r\n        Object.keys(setupStore).forEach((key) => {\r\n            set(store, key, setupStore[key]);\r\n        });\r\n    }\r\n    else {\r\n        assign(store, setupStore);\r\n        // allows retrieving reactive objects with `storeToRefs()`. Must be called after assigning to the reactive object.\r\n        // Make `storeToRefs()` work with `reactive()` #799\r\n        assign(toRaw(store), setupStore);\r\n    }\r\n    // use this instead of a computed with setter to be able to create it anywhere\r\n    // without linking the computed lifespan to wherever the store is first\r\n    // created.\r\n    Object.defineProperty(store, '$state', {\r\n        get: () => ((process.env.NODE_ENV !== 'production') && hot ? hotState.value : pinia.state.value[$id]),\r\n        set: (state) => {\r\n            /* istanbul ignore if */\r\n            if ((process.env.NODE_ENV !== 'production') && hot) {\r\n                throw new Error('cannot set hotState');\r\n            }\r\n            $patch(($state) => {\r\n                assign($state, state);\r\n            });\r\n        },\r\n    });\r\n    // add the hotUpdate before plugins to allow them to override it\r\n    /* istanbul ignore else */\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        store._hotUpdate = markRaw((newStore) => {\r\n            store._hotUpdating = true;\r\n            newStore._hmrPayload.state.forEach((stateKey) => {\r\n                if (stateKey in store.$state) {\r\n                    const newStateTarget = newStore.$state[stateKey];\r\n                    const oldStateSource = store.$state[stateKey];\r\n                    if (typeof newStateTarget === 'object' &&\r\n                        isPlainObject(newStateTarget) &&\r\n                        isPlainObject(oldStateSource)) {\r\n                        patchObject(newStateTarget, oldStateSource);\r\n                    }\r\n                    else {\r\n                        // transfer the ref\r\n                        newStore.$state[stateKey] = oldStateSource;\r\n                    }\r\n                }\r\n                // patch direct access properties to allow store.stateProperty to work as\r\n                // store.$state.stateProperty\r\n                set(store, stateKey, toRef(newStore.$state, stateKey));\r\n            });\r\n            // remove deleted state properties\r\n            Object.keys(store.$state).forEach((stateKey) => {\r\n                if (!(stateKey in newStore.$state)) {\r\n                    del(store, stateKey);\r\n                }\r\n            });\r\n            // avoid devtools logging this as a mutation\r\n            isListening = false;\r\n            isSyncListening = false;\r\n            pinia.state.value[$id] = toRef(newStore._hmrPayload, 'hotState');\r\n            isSyncListening = true;\r\n            nextTick().then(() => {\r\n                isListening = true;\r\n            });\r\n            for (const actionName in newStore._hmrPayload.actions) {\r\n                const action = newStore[actionName];\r\n                set(store, actionName, wrapAction(actionName, action));\r\n            }\r\n            // TODO: does this work in both setup and option store?\r\n            for (const getterName in newStore._hmrPayload.getters) {\r\n                const getter = newStore._hmrPayload.getters[getterName];\r\n                const getterValue = isOptionsStore\r\n                    ? // special handling of options api\r\n                        computed(() => {\r\n                            setActivePinia(pinia);\r\n                            return getter.call(store, store);\r\n                        })\r\n                    : getter;\r\n                set(store, getterName, getterValue);\r\n            }\r\n            // remove deleted getters\r\n            Object.keys(store._hmrPayload.getters).forEach((key) => {\r\n                if (!(key in newStore._hmrPayload.getters)) {\r\n                    del(store, key);\r\n                }\r\n            });\r\n            // remove old actions\r\n            Object.keys(store._hmrPayload.actions).forEach((key) => {\r\n                if (!(key in newStore._hmrPayload.actions)) {\r\n                    del(store, key);\r\n                }\r\n            });\r\n            // update the values used in devtools and to allow deleting new properties later on\r\n            store._hmrPayload = newStore._hmrPayload;\r\n            store._getters = newStore._getters;\r\n            store._hotUpdating = false;\r\n        });\r\n    }\r\n    if (USE_DEVTOOLS) {\r\n        const nonEnumerable = {\r\n            writable: true,\r\n            configurable: true,\r\n            // avoid warning on devtools trying to display this property\r\n            enumerable: false,\r\n        };\r\n        ['_p', '_hmrPayload', '_getters', '_customProperties'].forEach((p) => {\r\n            Object.defineProperty(store, p, assign({ value: store[p] }, nonEnumerable));\r\n        });\r\n    }\r\n    /* istanbul ignore if */\r\n    if (isVue2) {\r\n        // mark the store as ready before plugins\r\n        store._r = true;\r\n    }\r\n    // apply all plugins\r\n    pinia._p.forEach((extender) => {\r\n        /* istanbul ignore else */\r\n        if (USE_DEVTOOLS) {\r\n            const extensions = scope.run(() => extender({\r\n                store,\r\n                app: pinia._a,\r\n                pinia,\r\n                options: optionsForPlugin,\r\n            }));\r\n            Object.keys(extensions || {}).forEach((key) => store._customProperties.add(key));\r\n            assign(store, extensions);\r\n        }\r\n        else {\r\n            assign(store, scope.run(() => extender({\r\n                store,\r\n                app: pinia._a,\r\n                pinia,\r\n                options: optionsForPlugin,\r\n            })));\r\n        }\r\n    });\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        store.$state &&\r\n        typeof store.$state === 'object' &&\r\n        typeof store.$state.constructor === 'function' &&\r\n        !store.$state.constructor.toString().includes('[native code]')) {\r\n        console.warn(`[üçç]: The \"state\" must be a plain object. It cannot be\\n` +\r\n            `\\tstate: () => new MyClass()\\n` +\r\n            `Found in store \"${store.$id}\".`);\r\n    }\r\n    // only apply hydrate to option stores with an initial state in pinia\r\n    if (initialState &&\r\n        isOptionsStore &&\r\n        options.hydrate) {\r\n        options.hydrate(store.$state, initialState);\r\n    }\r\n    isListening = true;\r\n    isSyncListening = true;\r\n    return store;\r\n}\r\nfunction defineStore(\r\n// TODO: add proper types from above\r\nidOrOptions, setup, setupOptions) {\r\n    let id;\r\n    let options;\r\n    const isSetupStore = typeof setup === 'function';\r\n    if (typeof idOrOptions === 'string') {\r\n        id = idOrOptions;\r\n        // the option store setup will contain the actual options in this case\r\n        options = isSetupStore ? setupOptions : setup;\r\n    }\r\n    else {\r\n        options = idOrOptions;\r\n        id = idOrOptions.id;\r\n    }\r\n    function useStore(pinia, hot) {\r\n        const currentInstance = getCurrentInstance();\r\n        pinia =\r\n            // in test mode, ignore the argument provided as we can always retrieve a\r\n            // pinia instance with getActivePinia()\r\n            ((process.env.NODE_ENV === 'test') && activePinia && activePinia._testing ? null : pinia) ||\r\n                (currentInstance && inject(piniaSymbol, null));\r\n        if (pinia)\r\n            setActivePinia(pinia);\r\n        if ((process.env.NODE_ENV !== 'production') && !activePinia) {\r\n            throw new Error(`[üçç]: getActivePinia was called with no active Pinia. Did you forget to install pinia?\\n` +\r\n                `\\tconst pinia = createPinia()\\n` +\r\n                `\\tapp.use(pinia)\\n` +\r\n                `This will fail in production.`);\r\n        }\r\n        pinia = activePinia;\r\n        if (!pinia._s.has(id)) {\r\n            // creating the store registers it in `pinia._s`\r\n            if (isSetupStore) {\r\n                createSetupStore(id, setup, options, pinia);\r\n            }\r\n            else {\r\n                createOptionsStore(id, options, pinia);\r\n            }\r\n            /* istanbul ignore else */\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                // @ts-expect-error: not the right inferred type\r\n                useStore._pinia = pinia;\r\n            }\r\n        }\r\n        const store = pinia._s.get(id);\r\n        if ((process.env.NODE_ENV !== 'production') && hot) {\r\n            const hotId = '__hot:' + id;\r\n            const newStore = isSetupStore\r\n                ? createSetupStore(hotId, setup, options, pinia, true)\r\n                : createOptionsStore(hotId, assign({}, options), pinia, true);\r\n            hot._hotUpdate(newStore);\r\n            // cleanup the state properties and the store from the cache\r\n            delete pinia.state.value[hotId];\r\n            pinia._s.delete(hotId);\r\n        }\r\n        // save stores in instances to access them devtools\r\n        if ((process.env.NODE_ENV !== 'production') &&\r\n            IS_CLIENT &&\r\n            currentInstance &&\r\n            currentInstance.proxy &&\r\n            // avoid adding stores that are just built for hot module replacement\r\n            !hot) {\r\n            const vm = currentInstance.proxy;\r\n            const cache = '_pStores' in vm ? vm._pStores : (vm._pStores = {});\r\n            cache[id] = store;\r\n        }\r\n        // StoreGeneric cannot be casted towards Store\r\n        return store;\r\n    }\r\n    useStore.$id = id;\r\n    return useStore;\r\n}\n\nlet mapStoreSuffix = 'Store';\r\n/**\r\n * Changes the suffix added by `mapStores()`. Can be set to an empty string.\r\n * Defaults to `\"Store\"`. Make sure to extend the MapStoresCustomization\r\n * interface if you are using TypeScript.\r\n *\r\n * @param suffix - new suffix\r\n */\r\nfunction setMapStoreSuffix(suffix // could be 'Store' but that would be annoying for JS\r\n) {\r\n    mapStoreSuffix = suffix;\r\n}\r\n/**\r\n * Allows using stores without the composition API (`setup()`) by generating an\r\n * object to be spread in the `computed` field of a component. It accepts a list\r\n * of store definitions.\r\n *\r\n * @example\r\n * ```js\r\n * export default {\r\n *   computed: {\r\n *     // other computed properties\r\n *     ...mapStores(useUserStore, useCartStore)\r\n *   },\r\n *\r\n *   created() {\r\n *     this.userStore // store with id \"user\"\r\n *     this.cartStore // store with id \"cart\"\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @param stores - list of stores to map to an object\r\n */\r\nfunction mapStores(...stores) {\r\n    if ((process.env.NODE_ENV !== 'production') && Array.isArray(stores[0])) {\r\n        console.warn(`[üçç]: Directly pass all stores to \"mapStores()\" without putting them in an array:\\n` +\r\n            `Replace\\n` +\r\n            `\\tmapStores([useAuthStore, useCartStore])\\n` +\r\n            `with\\n` +\r\n            `\\tmapStores(useAuthStore, useCartStore)\\n` +\r\n            `This will fail in production if not fixed.`);\r\n        stores = stores[0];\r\n    }\r\n    return stores.reduce((reduced, useStore) => {\r\n        // @ts-expect-error: $id is added by defineStore\r\n        reduced[useStore.$id + mapStoreSuffix] = function () {\r\n            return useStore(this.$pinia);\r\n        };\r\n        return reduced;\r\n    }, {});\r\n}\r\n/**\r\n * Allows using state and getters from one store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `computed` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\r\nfunction mapState(useStore, keysOrMapper) {\r\n    return Array.isArray(keysOrMapper)\r\n        ? keysOrMapper.reduce((reduced, key) => {\r\n            reduced[key] = function () {\r\n                return useStore(this.$pinia)[key];\r\n            };\r\n            return reduced;\r\n        }, {})\r\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\r\n            // @ts-expect-error\r\n            reduced[key] = function () {\r\n                const store = useStore(this.$pinia);\r\n                const storeKey = keysOrMapper[key];\r\n                // for some reason TS is unable to infer the type of storeKey to be a\r\n                // function\r\n                return typeof storeKey === 'function'\r\n                    ? storeKey.call(this, store)\r\n                    : store[storeKey];\r\n            };\r\n            return reduced;\r\n        }, {});\r\n}\r\n/**\r\n * Alias for `mapState()`. You should use `mapState()` instead.\r\n * @deprecated use `mapState()` instead.\r\n */\r\nconst mapGetters = mapState;\r\n/**\r\n * Allows directly using actions from your store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `methods` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\r\nfunction mapActions(useStore, keysOrMapper) {\r\n    return Array.isArray(keysOrMapper)\r\n        ? keysOrMapper.reduce((reduced, key) => {\r\n            // @ts-expect-error\r\n            reduced[key] = function (...args) {\r\n                return useStore(this.$pinia)[key](...args);\r\n            };\r\n            return reduced;\r\n        }, {})\r\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\r\n            // @ts-expect-error\r\n            reduced[key] = function (...args) {\r\n                return useStore(this.$pinia)[keysOrMapper[key]](...args);\r\n            };\r\n            return reduced;\r\n        }, {});\r\n}\r\n/**\r\n * Allows using state and getters from one store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `computed` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\r\nfunction mapWritableState(useStore, keysOrMapper) {\r\n    return Array.isArray(keysOrMapper)\r\n        ? keysOrMapper.reduce((reduced, key) => {\r\n            // @ts-ignore\r\n            reduced[key] = {\r\n                get() {\r\n                    return useStore(this.$pinia)[key];\r\n                },\r\n                set(value) {\r\n                    // it's easier to type it here as any\r\n                    return (useStore(this.$pinia)[key] = value);\r\n                },\r\n            };\r\n            return reduced;\r\n        }, {})\r\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\r\n            // @ts-ignore\r\n            reduced[key] = {\r\n                get() {\r\n                    return useStore(this.$pinia)[keysOrMapper[key]];\r\n                },\r\n                set(value) {\r\n                    // it's easier to type it here as any\r\n                    return (useStore(this.$pinia)[keysOrMapper[key]] = value);\r\n                },\r\n            };\r\n            return reduced;\r\n        }, {});\r\n}\n\n/**\r\n * Creates an object of references with all the state, getters, and plugin-added\r\n * state properties of the store. Similar to `toRefs()` but specifically\r\n * designed for Pinia stores so methods and non reactive properties are\r\n * completely ignored.\r\n *\r\n * @param store - store to extract the refs from\r\n */\r\nfunction storeToRefs(store) {\r\n    // See https://github.com/vuejs/pinia/issues/852\r\n    // It's easier to just use toRefs() even if it includes more stuff\r\n    if (isVue2) {\r\n        // @ts-expect-error: toRefs include methods and others\r\n        return toRefs(store);\r\n    }\r\n    else {\r\n        store = toRaw(store);\r\n        const refs = {};\r\n        for (const key in store) {\r\n            const value = store[key];\r\n            if (isRef(value) || isReactive(value)) {\r\n                // @ts-expect-error: the key is state or getter\r\n                refs[key] =\r\n                    // ---\r\n                    toRef(store, key);\r\n            }\r\n        }\r\n        return refs;\r\n    }\r\n}\n\n/**\r\n * Vue 2 Plugin that must be installed for pinia to work. Note **you don't need\r\n * this plugin if you are using Nuxt.js**. Use the `buildModule` instead:\r\n * https://pinia.vuejs.org/ssr/nuxt.html.\r\n *\r\n * @example\r\n * ```js\r\n * import Vue from 'vue'\r\n * import { PiniaVuePlugin, createPinia } from 'pinia'\r\n *\r\n * Vue.use(PiniaVuePlugin)\r\n * const pinia = createPinia()\r\n *\r\n * new Vue({\r\n *   el: '#app',\r\n *   // ...\r\n *   pinia,\r\n * })\r\n * ```\r\n *\r\n * @param _Vue - `Vue` imported from 'vue'.\r\n */\r\nconst PiniaVuePlugin = function (_Vue) {\r\n    // Equivalent of\r\n    // app.config.globalProperties.$pinia = pinia\r\n    _Vue.mixin({\r\n        beforeCreate() {\r\n            const options = this.$options;\r\n            if (options.pinia) {\r\n                const pinia = options.pinia;\r\n                // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/main/src/apis/inject.ts#L31\r\n                /* istanbul ignore else */\r\n                if (!this._provided) {\r\n                    const provideCache = {};\r\n                    Object.defineProperty(this, '_provided', {\r\n                        get: () => provideCache,\r\n                        set: (v) => Object.assign(provideCache, v),\r\n                    });\r\n                }\r\n                this._provided[piniaSymbol] = pinia;\r\n                // propagate the pinia instance in an SSR friendly way\r\n                // avoid adding it to nuxt twice\r\n                /* istanbul ignore else */\r\n                if (!this.$pinia) {\r\n                    this.$pinia = pinia;\r\n                }\r\n                pinia._a = this;\r\n                if (IS_CLIENT) {\r\n                    // this allows calling useStore() outside of a component setup after\r\n                    // installing pinia's plugin\r\n                    setActivePinia(pinia);\r\n                }\r\n                if (USE_DEVTOOLS) {\r\n                    registerPiniaDevtools(pinia._a, pinia);\r\n                }\r\n            }\r\n            else if (!this.$pinia && options.parent && options.parent.$pinia) {\r\n                this.$pinia = options.parent.$pinia;\r\n            }\r\n        },\r\n        destroyed() {\r\n            delete this._pStores;\r\n        },\r\n    });\r\n};\n\nexport { MutationType, PiniaVuePlugin, acceptHMRUpdate, createPinia, defineStore, getActivePinia, mapActions, mapGetters, mapState, mapStores, mapWritableState, setActivePinia, setMapStoreSuffix, skipHydrate, storeToRefs };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}