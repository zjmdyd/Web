{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, _toDisplayString($setup.hello), 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString($setup.eha), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;6DACEA,oBAAsB,8BAAdC,YAAK,kBACbD,oBAAoB,8BAAZC,UAAG","names":["_createElementVNode","$setup"],"sourceRoot":"","sources":["/Users/issuser/Desktop/Project/Web/05_vue3/vue_demo/src/components/vue3-017.vue"],"sourcesContent":["<template>\n  <div>{{ hello }}</div>\n  <div>{{ eha }}</div>\n</template>\n\n<script setup>\nimport { getCurrentInstance, ref } from 'vue';\n\n/*\ngetCurrentInstance是一个function方法，getCurrentInstance()是一个对象，\nproxy也是一个对象。proxy是getCurrentInstance()对象中的一个属性\n\nctx和proxy都是getCurrentInstance()对象中的属性，通过解构赋值的方式拿到,\n2者有所区别。ctx是普通对象，proxy是Proxy对象\n*/\n// 用来获取当前组件实例 \nconst proxy0 = getCurrentInstance()\nconst { proxy } = getCurrentInstance()  // 对象解构赋值\nconst { ctx } = getCurrentInstance()    // 对象解构赋值\nconsole.log('proxy =')\nconsole.log(proxy)\nconsole.log('ctx =')\nconsole.log(ctx)\nconsole.log(proxy0)\nconsole.log(proxy0 === proxy.$) // true\nconsole.log(proxy === proxy0.proxy) // true\n\nconst hello = proxy.$translate('greetings.hello')\nconst eha = proxy.$translate('greetings.hengheng')\n\n// console.log(hello)\n// console.log(eha)\n// 除了数据属性，Vue 实例还暴露了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来\n\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}